module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./app/YouMeVideo.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/YMLogUtils.ts":
/*!***************************!*\
  !*** ./app/YMLogUtils.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 日志级别
 *
 * @export
 * @enum {number}
 */
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["DISABLED"] = 0] = "DISABLED";
    LogLevel[LogLevel["FATAL"] = 1] = "FATAL";
    LogLevel[LogLevel["ERROR"] = 10] = "ERROR";
    LogLevel[LogLevel["WARNING"] = 20] = "WARNING";
    LogLevel[LogLevel["INFO"] = 40] = "INFO";
    LogLevel[LogLevel["DEBUG"] = 50] = "DEBUG";
    LogLevel[LogLevel["VERBOSE"] = 60] = "VERBOSE";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
/**
 * 日志工具
 *
 * @export
 * @class YMLogUtils
 */
var YMLogUtils = /** @class */ (function () {
    function YMLogUtils() {
        YMLogUtils._logLevel = LogLevel.INFO;
    }
    YMLogUtils.setLogLevel = function (level) {
        this._logLevel = level;
    };
    YMLogUtils.getLogLevel = function () {
        return this._logLevel;
    };
    /**
     * 格式化时间
     *
     * @private
     * @static
     * @returns {string}
     * @memberof YMLogUtils
     */
    YMLogUtils.getNowFormatDate = function () {
        var date = new Date();
        var seperator1 = "-";
        var seperator2 = ":";
        var month = date.getMonth() + 1;
        var monthStr = "";
        var numDate = date.getDate();
        var strDate = "";
        if (month >= 1 && month <= 9) {
            monthStr = "0" + month;
        }
        else {
            monthStr = "" + month;
        }
        if (numDate >= 0 && numDate <= 9) {
            strDate = "0" + numDate;
        }
        else {
            strDate = "" + numDate;
        }
        var currentdate = date.getFullYear() + seperator1 + monthStr + seperator1 + strDate
            + " " + date.getHours() + seperator2 + date.getMinutes()
            + seperator2 + date.getSeconds() + seperator2 + date.getMilliseconds();
        return currentdate;
    };
    ;
    /**
     * INFO级别日志
     *
     * @static
     * @param {...any[]} logParams
     * @returns
     * @memberof YMLogUtils
     */
    YMLogUtils.LOGI = function () {
        var logParams = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            logParams[_i] = arguments[_i];
        }
        if (YMLogUtils._logLevel < LogLevel.INFO)
            return;
        if (navigator.appName == "Microsoft Internet Explorer" && parseInt(navigator.appVersion.split(";")[1].replace(/[ ]/g, "").replace("MSIE", "")) < 11) {
            console.log("YouMeVideo -INFO- " + this.getNowFormatDate() + logParams);
        }
        else {
            console.log.apply(console, ["YouMeVideo -INFO- ", this.getNowFormatDate()].concat(logParams));
        }
    };
    /**
     * WARN级别的日志
     *
     * @static
     * @param {...any[]} logParams
     * @returns
     * @memberof YMLogUtils
     */
    YMLogUtils.LOGW = function () {
        var logParams = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            logParams[_i] = arguments[_i];
        }
        if (YMLogUtils._logLevel < LogLevel.WARNING)
            return;
        if (navigator.appName == "Microsoft Internet Explorer" && parseInt(navigator.appVersion.split(";")[1].replace(/[ ]/g, "").replace("MSIE", "")) < 11) {
            console.warn("YouMeVideo -WARNING- " + this.getNowFormatDate() + logParams);
        }
        else {
            console.warn.apply(console, ["YouMeVideo -WARNING- ", this.getNowFormatDate()].concat(logParams));
        }
    };
    /**
     * ERROR级别的日志
     *
     * @static
     * @param {...any[]} logParams
     * @returns
     * @memberof YMLogUtils
     */
    YMLogUtils.LOGE = function () {
        var logParams = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            logParams[_i] = arguments[_i];
        }
        if (YMLogUtils._logLevel < LogLevel.ERROR)
            return;
        if (navigator.appName == "Microsoft Internet Explorer" && parseInt(navigator.appVersion.split(";")[1].replace(/[ ]/g, "").replace("MSIE", "")) < 11) {
            console.error("YouMeVideo -ERROR- " + this.getNowFormatDate() + logParams);
        }
        else {
            console.error.apply(console, ["YouMeVideo -ERROR- ", this.getNowFormatDate()].concat(logParams));
        }
    };
    YMLogUtils._logLevel = LogLevel.INFO;
    return YMLogUtils;
}());
exports.YMLogUtils = YMLogUtils;


/***/ }),

/***/ "./app/YouMeSDK.js":
/*!*************************!*\
  !*** ./app/YouMeSDK.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
//启用严格模式，ES6 的模块自动采用严格模式，不管你有没有在模块头部加上"use strict";。

const ffi = __webpack_require__(/*! ffi */ "ffi")
const ref = __webpack_require__(/*! ref */ "ref")
const os = __webpack_require__(/*! os */ "os");
var plat = os.platform();
var arch = os.arch();
var path = __webpack_require__(/*! path */ "path");

const EventEmitter = __webpack_require__(/*! events */ "events");
const emitter = new EventEmitter();

var BGRAWebGLCanvas = __webpack_require__(/*! ./canvas/BGRAWebGLCanvas */ "./app/canvas/BGRAWebGLCanvas.js");
var WebGLCanvas = __webpack_require__(/*! ./canvas/WebGLCanvas */ "./app/canvas/WebGLCanvas.js");
var YUVWebGLCanvas = __webpack_require__(/*! ./canvas/YUVWebGLCanvas */ "./app/canvas/YUVWebGLCanvas.js");
var Size = __webpack_require__(/*! ./utils/Size */ "./app/utils/Size.js");

let libPath = path.join(__dirname, 'youme_voice_engine', 'macos', 'youme_voice_engine_macd');
if (plat !== "darwin") {
    var kernel32 = ffi.Library("kernel32", {
        'SetDllDirectoryA': ["bool", ["string"]]
    });
    if (arch === 'x64') {
        kernel32.SetDllDirectoryA(path.join(__dirname, 'youme_voice_engine', 'x86-64'));
    } else {
        kernel32.SetDllDirectoryA(path.join(__dirname, 'youme_voice_engine', 'x86'));
    }
    libPath = 'youme_voice_engine';
}

//从c库中导出js接口
var cDefines = {
    "youme_init": ['int', ['string', 'string', 'int', 'string']],
    "youme_setExternalInputMode": ["void", ['bool']],
    "youme_setAVStatisticInterval": ["void", ['int']],
    "youme_setVideoNetResolution": ['int', ['int', 'int']],
    "youme_setVideoLocalResolution": ['int', ['int', 'int']],
    "youme_getCbMessage2": ['char *', []],
    "youme_freeCbMessage2": ['void', ['string']],
    "youme_joinChannelSingleMode": ['int', ['string', 'string', 'int']],
    "youme_getSDKVersion": ['int', []],
    "youme_leaveChannelAll": ['int', []],
    "youme_setToken": ['void', ['string']],
    "youme_setAudioQuality": ['void', ['int']],
    "youme_unInit": ['int', []],
    "youme_setVolume": ['void', ['int']],
    "youme_getVolume": ['uint', []],
    "youme_setMicrophoneMute": ['void', ['bool']],
    "youme_getMicrophoneMute": ['bool', []],
    "youme_getSpeakerMute": ['bool', []],
    "youme_setSpeakerMute": ['void', ['bool']],
    "youme_setOtherSpeakerMute": ['int', ['string', 'bool']],
    "youme_setOtherMicMute": ['int', ['string', 'bool']],
    "youme_setListenOtherVoice": ['int', ['string', 'bool']],
    "youme_setLogLevel": ['int', ['int', 'int']],
    "youme_setServerRegion": ['void', ['int', 'string', 'bool']],
    "youme_startCapture": ['int', []],
    "youme_stopCapture": ['int', []],
    "youme_setTestConfig": ['void', ['int']],
    "youme_setOutputToSpeaker": ['int', ['bool']],
    "youme_setAutoSendStatus": ['void', ['bool']],
    "youme_getUseMobileNetworkEnabled": ['bool', []],
    "youme_setUseMobileNetworkEnabled": ['void', ['bool']],
    "youme_setUserLogPath": ['int', ['string']],
    "youme_playBackgroundMusic": ['int', ['string', 'bool']],
    "youme_pauseBackgroundMusic": ['int', []],
    "youme_resumeBackgroundMusic": ['int', []],
    "youme_stopBackgroundMusic": ['int', []],
    "youme_setBackgroundMusicVolume": ['int', ['int']],
    "youme_setHeadsetMonitorOn": ['int', ['bool', 'bool']],
    "youme_setReverbEnabled": ['int', ['bool']],
    "youme_setVadCallbackEnabled": ['int', ['bool']],
    "youme_setMicLevelCallback": ['int', ['int']],
    "youme_setFarendVoiceLevelCallback": ['int', ['int']],
    "youme_setReleaseMicWhenMute": ['int', ['bool']],
    "youme_pauseChannel": ['int', []],
    "youme_resumeChannel": ['int', []],
    "youme_setRecordingTimeMs": ['void', ['uint']],
    "youme_setPlayingTimeMs": ['void', ['uint']],
    "youme_setServerMode": ['void', ['int']],
    "youme_requestRestApi": ['int', ['string', 'string', ref.refType('int')]],
    "youme_getChannelUserList": ['int', ['string', 'int', 'bool']],
    "youme_setUserRole": ['int', ['int']],
    "youme_getUserRole": ['int', []],
    "youme_isBackgroundMusicPlaying": ['bool', []],
    "youme_isInited": ['bool', []],
    "youme_isInChannel": ['bool', ['string']],
    "youme_sendMessage": ['int', ['string', 'string', ref.refType('int')]],
    "youme_kickOtherFromChannel": ['int', ['string', 'string', 'int']],
    "youme_openVideoEncoder": ['int', ['string']],
    "youme_inputAudioFrame": ['int', [ref.refType('pointer'), 'int', 'uint64']],
    "youme_inputVideoFrame": ['int', [ref.refType('pointer'), 'int', 'int', 'int', 'int', 'int', 'int', 'uint64']],
    "youme_stopInputVideoFrame": ['int', []],
    "youme_getVideoFrame": ['char *', ['string', ref.refType('int'), ref.refType('int'), ref.refType('int')]],
    "youme_setVideoCallback": ['int', ['string']],
    "youme_setVideoFps": ['int', ['int']],
    "youme_switchCamera": ['int', []],
    "youme_resetCamera": ['int', []],
    "youme_setCaptureFrontCameraEnable": ['int', ['bool']],
    "youme_maskVideoByUserId": ['int', ['string', 'bool']],
    "youme_setExternalInputSampleRate": ['int', ['int', 'int']],
    "youme_setVideoNetResolutionForSecond": ['int', ['int', 'int']],
    "youme_setVideoCodeBitrateForSecond": ['void', ['uint', 'uint']],
    "youme_getCurrentVideoCodeBitrate": ['uint', []],
    "youme_setVideoHardwareCodeEnable": ['void', ['bool']],
    "youme_getVideoHardwareCodeEnable": ['bool', []],
    "youme_setVideoNoFrameTimeout": ['void', ['int']],
    "youme_queryUsersVideoInfo": ['int', ['string']],
    "youme_setUsersVideoInfo": ['int', ['string']],
    "youme_openBeautify": ['int', ['bool']],
    "youme_beautifyChanged": ['int', ['double']],
    "youme_stretchFace": ['int', ['bool']],
    "youme_releaseMicSync": ['bool', []],
    "youme_resumeMicSync": ['bool', []],
    "youme_setMixVideoSize": ['void', ['int', 'int']],
    "youme_getCameraCount": ['int', []],
    "youme_getCameraName": ['int', ['int', ref.refType(ref.types.char)]],
    "youme_setOpenCameraId": ['int', ['int']],
    "youme_getVideoFrameNew": ['char *', ['string', ref.refType('int'), ref.refType('int'), ref.refType('int'), ref.refType('int')]],
    "youme_videoEngineModelEnabled": ['void', ['bool']],
}

var youme = ffi.Library(libPath, cDefines);

//获取引擎回调

function GetMsg() {
    var msg = youme.youme_getCbMessage2();

    while (msg != null && msg != "" && msg != undefined) {
        var str = ref.readCString(msg);
        var json = JSON.parse(str);
        var result_obj = new Object();

        var type = json.type;
        var memchange;
        if (type === 0) {
            var event = json.event;
            result_obj.errorcode = json.error;
            result_obj.channelid = json.channelid;
            result_obj.param = json.param;
            switch (event) {

                //YOUME_EVENT_INIT_OK 初始化成功
                case 0:
                    emitter.emit('YOUME_EVENT_INIT_OK', result_obj);
                    break;

                //YOUME_EVENT_INIT_FAILED  SDK初始化失败
                case 1:
                    emitter.emit('YOUME_EVENT_INIT_FAILED', result_obj);
                    break;

                //YOUME_EVENT_JOIN_OK   进入语音频道成功
                case 2:
                    emitter.emit('YOUME_EVENT_JOIN_OK', result_obj);
                    break;

                //YOUME_EVENT_JOIN_FAILED   进入语音频道失败
                case 3:
                    emitter.emit('YOUME_EVENT_JOIN_FAILED', result_obj);
                    break;

                //YOUME_EVENT_LEAVED_ALL   退出所有语音频道完成
                case 5:
                    emitter.emit('YOUME_EVENT_LEAVED_ALL', result_obj);
                    break;

                //YOUME_EVENT_PAUSED   暂停语音频道完成
                case 6:
                    emitter.emit('YOUME_EVENT_PAUSED', result_obj);
                    break;

                //YOUME_EVENT_RESUMED   恢复语音频道完成
                case 7:
                    emitter.emit('YOUME_EVENT_RESUMED', result_obj);
                    break;

                //YOUME_EVENT_RECONNECTING   断网了，正在重连
                case 10:
                    emitter.emit('YOUME_EVENT_RECONNECTING', result_obj);
                    break;

                //YOUME_EVENT_RECONNECTED   断网重连成功
                case 11:
                    emitter.emit('YOUME_EVENT_RECONNECTED', result_obj);
                    break;

                //YOUME_EVENT_REC_PERMISSION_STATUS
                //通知录音权限状态，成功获取权限时错误码为YOUME_SUCCESS，获取失败为YOUME_ERROR_REC_NO_PERMISSION（此时不管麦克风mute状态如何，都没有声音输出）
                case 12:
                    emitter.emit('YOUME_EVENT_REC_PERMISSION_STATUS', result_obj);
                    break;

                //YOUME_EVENT_BGM_STOPPED  通知背景音乐播放结束
                case 13:
                    emitter.emit('YOUME_EVENT_BGM_STOPPED', result_obj);
                    break;

                //YOUME_EVENT_BGM_FAILED  通知背景音乐播放失败
                case 14:
                    emitter.emit('YOUME_EVENT_BGM_FAILED', result_obj);
                    break;

                //YOUME_EVENT_OTHERS_MIC_ON  其他用户麦克风打开
                case 16:
                    emitter.emit('YOUME_EVENT_OTHERS_MIC_ON', result_obj);
                    break;

                //YOUME_EVENT_OTHERS_MIC_OFF  其他用户麦克风关闭
                case 17:
                    emitter.emit('YOUME_EVENT_OTHERS_MIC_OFF', result_obj);
                    break;

                //YOUME_EVENT_OTHERS_SPEAKER_ON  其他用户扬声器打开
                case 18:
                    emitter.emit('YOUME_EVENT_OTHERS_SPEAKER_ON', result_obj);
                    break;

                //YOUME_EVENT_OTHERS_SPEAKER_OFF  其他用户扬声器关闭
                case 19:
                    emitter.emit('YOUME_EVENT_OTHERS_SPEAKER_OFF', result_obj);
                    break;

                //YOUME_EVENT_OTHERS_VOICE_ON  其他用户进入讲话状态
                case 20:
                    emitter.emit('YOUME_EVENT_OTHERS_VOICE_ON', result_obj);
                    break;

                //YOUME_EVENT_OTHERS_VOICE_OFF  其他用户进入静默状态
                case 21:
                    emitter.emit('YOUME_EVENT_OTHERS_VOICE_OFF', result_obj);
                    break;

                //YOUME_EVENT_MY_MIC_LEVEL  麦克风的语音级别
                case 22:
                    emitter.emit('YOUME_EVENT_MY_MIC_LEVEL', result_obj);
                    break;

                //YOUME_EVENT_MIC_CTR_ON  麦克风被其他用户打开
                case 23:
                    emitter.emit('YOUME_EVENT_MIC_CTR_ON', result_obj);
                    break;

                //YOUME_EVENT_MIC_CTR_OFF  麦克风被其他用户关闭
                case 24:
                    emitter.emit('YOUME_EVENT_MIC_CTR_OFF', result_obj);
                    break;

                //YOUME_EVENT_SPEAKER_CTR_ON  扬声器被其他用户打开
                case 25:
                    emitter.emit('YOUME_EVENT_SPEAKER_CTR_ON', result_obj);
                    break;

                //YOUME_EVENT_SPEAKER_CTR_OFF  扬声器被其他用户关闭
                case 26:
                    emitter.emit('YOUME_EVENT_SPEAKER_CTR_OFF', result_obj);
                    break;

                //YOUME_EVENT_LISTEN_OTHER_ON  取消屏蔽某人语音
                case 27:
                    emitter.emit('YOUME_EVENT_LISTEN_OTHER_ON', result_obj);
                    break;

                //YOUME_EVENT_LISTEN_OTHER_OFF  屏蔽某人语音
                case 28:
                    emitter.emit('YOUME_EVENT_LISTEN_OTHER_OFF', result_obj);
                    break;

                //YOUME_EVENT_LOCAL_MIC_ON  自己的麦克风打开
                case 29:
                    emitter.emit('YOUME_EVENT_LOCAL_MIC_ON', result_obj);
                    break;

                //YOUME_EVENT_LOCAL_MIC_OFF  自己的麦克风关闭
                case 30:
                    emitter.emit('YOUME_EVENT_LOCAL_MIC_OFF', result_obj);
                    break;

                //YOUME_EVENT_LOCAL_SPEAKER_ON  自己的扬声器打开
                case 31:
                    emitter.emit('YOUME_EVENT_LOCAL_SPEAKER_ON', result_obj);
                    break;

                //YOUME_EVENT_LOCAL_SPEAKER_OFF  自己的扬声器关闭
                case 32:
                    emitter.emit('YOUME_EVENT_LOCAL_SPEAKER_OFF', result_obj);
                    break;

                //YOUME_EVENT_SEND_MESSAGE_RESULT  sendMessage成功与否的通知，param为回传的requestID
                case 60:
                    emitter.emit('YOUME_EVENT_SEND_MESSAGE_RESULT', result_obj);
                    break;

                //YOUME_EVENT_MESSAGE_NOTIFY  收到Message, param为message内容
                case 61:
                    emitter.emit('YOUME_EVENT_MESSAGE_NOTIFY', result_obj);
                    break;

                //YOUME_EVENT_KICK_RESULT  踢人的应答
                case 64:
                    emitter.emit('YOUME_EVENT_KICK_RESULT', result_obj);
                    break;

                //YOUME_EVENT_KICK_NOTIFY  被踢通知   ,param: （踢人者ID，被踢原因，被禁时间）
                case 65:
                    emitter.emit('YOUME_EVENT_KICK_NOTIFY', result_obj);
                    break;

                //YOUME_EVENT_FAREND_VOICE_LEVEL  远端说话人音量大小
                case 66:
                    emitter.emit('YOUME_EVENT_FAREND_VOICE_LEVEL', result_obj);
                    break;

                //YOUME_EVENT_OTHERS_BE_KICKED  房间里其他人被踢出房间
                case 67:
                    emitter.emit('YOUME_EVENT_OTHERS_BE_KICKED', result_obj);
                    break;

                //YOUME_EVENT_OTHERS_VIDEO_ON  其他用户视频流打开
                case 200:
                    emitter.emit('YOUME_EVENT_OTHERS_VIDEO_ON', result_obj);
                    break;

                //YOUME_EVENT_MASK_VIDEO_BY_OTHER_USER  视频被其他用户屏蔽
                case 204:
                    emitter.emit('YOUME_EVENT_MASK_VIDEO_BY_OTHER_USER', result_obj);
                    break;

                //YOUME_EVENT_RESUME_VIDEO_BY_OTHER_USER  视频被其他用户恢复
                case 205:
                    emitter.emit('YOUME_EVENT_RESUME_VIDEO_BY_OTHER_USER', result_obj);
                    break;

                //YOUME_EVENT_MASK_VIDEO_FOR_USER  屏蔽了谁的视频
                case 206:
                    emitter.emit('YOUME_EVENT_MASK_VIDEO_FOR_USER', result_obj);
                    break;

                //YOUME_EVENT_RESUME_VIDEO_FOR_USER  恢复了谁的视频
                case 207:
                    emitter.emit('YOUME_EVENT_RESUME_VIDEO_FOR_USER', result_obj);
                    break;

                //YOUME_EVENT_OTHERS_VIDEO_SHUT_DOWN  视频断开
                case 208:
                    emitter.emit('YOUME_EVENT_OTHERS_VIDEO_SHUT_DOWN', result_obj);
                    break;

                //YOUME_EVENT_OTHERS_VIDEO_INPUT_START  其他用户视频输入开始
                case 209:
                    emitter.emit('YOUME_EVENT_OTHERS_VIDEO_INPUT_START', result_obj);
                    break;

                //YOUME_EVENT_OTHERS_VIDEO_INPUT_STOP  其他用户视频输入结束
                case 210:
                    emitter.emit('YOUME_EVENT_OTHERS_VIDEO_INPUT_STOP', result_obj);
                    break;

                //YOUME_EVENT_MEDIA_DATA_ROAD_PASS  音视频数据通路连通，定时检测，一开始收到数据会收到PASS事件，之后变化的时候会发送
                case 211:
                    emitter.emit('YOUME_EVENT_MEDIA_DATA_ROAD_PASS', result_obj);
                    break;

                //YOUME_EVENT_MEDIA_DATA_ROAD_BLOCK  音视频数据通路不通
                case 212:
                    emitter.emit('YOUME_EVENT_MEDIA_DATA_ROAD_BLOCK', result_obj);
                    break;

                //YOUME_EVENT_QUERY_USERS_VIDEO_INFO  查询用户视频信息返回
                case 213:
                    emitter.emit('YOUME_EVENT_QUERY_USERS_VIDEO_INFO', result_obj);
                    break;

                //YOUME_EVENT_SET_USERS_VIDEO_INFO  设置用户接收视频信息返回
                case 214:
                    emitter.emit('YOUME_EVENT_SET_USERS_VIDEO_INFO', result_obj);
                    break;

                //YOUME_EVENT_LOCAL_VIDEO_INPUT_START  本地视频输入开始（内部采集下开始摄像头/外部输入下开始input）
                case 215:
                    emitter.emit('YOUME_EVENT_LOCAL_VIDEO_INPUT_START', result_obj);
                    break;

                //YOUME_EVENT_LOCAL_VIDEO_INPUT_STOP  本地视频输入停止（内部采集下停止摄像头/外部输入下停止input）
                case 216:
                    emitter.emit('YOUME_EVENT_LOCAL_VIDEO_INPUT_STOP', result_obj);
                    break;

                //YOUME_EVENT_OTHERS_DATA_ERROR  数据错误
                case 300:
                    emitter.emit('YOUME_EVENT_OTHERS_DATA_ERROR', result_obj);
                    break;

                //YOUME_EVENT_OTHERS_NETWORK_BAD  网络不好
                case 301:
                    emitter.emit('YOUME_EVENT_OTHERS_NETWORK_BAD', result_obj);
                    break;

                //YOUME_EVENT_OTHERS_BLACK_FULL  黑屏
                case 302:
                    emitter.emit('YOUME_EVENT_OTHERS_BLACK_FULL', result_obj);
                    break;

                //YOUME_EVENT_OTHERS_GREEN_FULL  绿屏
                case 303:
                    emitter.emit('YOUME_EVENT_OTHERS_GREEN_FULL', result_obj);
                    break;

                //YOUME_EVENT_OTHERS_BLACK_BORDER  黑边
                case 304:
                    emitter.emit('YOUME_EVENT_OTHERS_BLACK_BORDER', result_obj);
                    break;

                //YOUME_EVENT_OTHERS_GREEN_BORDER  绿边
                case 305:
                    emitter.emit('YOUME_EVENT_OTHERS_GREEN_BORDER', result_obj);
                    break;

                //YOUME_EVENT_OTHERS_BLURRED_SCREEN  花屏
                case 306:
                    emitter.emit('YOUME_EVENT_OTHERS_BLURRED_SCREEN', result_obj);
                    break;

                //YOUME_EVENT_OTHERS_ENCODER_ERROR  编码错误
                case 307:
                    emitter.emit('YOUME_EVENT_OTHERS_ENCODER_ERROR', result_obj);
                    break;

                //YOUME_EVENT_OTHERS_DECODER_ERROR  解码错误
                case 308:
                    emitter.emit('YOUME_EVENT_OTHERS_DECODER_ERROR', result_obj);
                    break;

                //YOUME_EVENT_CAMERA_DEVICE_CONNECT  摄像头设备插入，移动端无效
                case 400:
                    emitter.emit('YOUME_EVENT_CAMERA_DEVICE_CONNECT', result_obj);
                    break;

                //YOUME_EVENT_CAMERA_DEVICE_DISCONNECT  摄像头设备拔出，移动端无效
                case 401:
                    emitter.emit('YOUME_EVENT_CAMERA_DEVICE_DISCONNECT', result_obj);
                    break;
            }
        }
        else if (type === 1) {
            result_obj.requestid = json.requestid;
            result_obj.errorcode = json.error;
            result_obj.query = json.query;
            result_obj.result = json.result;
            emitter.emit("onRequestRestAPI", result_obj);
        }
        else if (type === 2) {
            result_obj.channelid = json.channelid;
            result_obj.isUpdate = json.isUpdate;
            result_obj.memchange = json.memchange;
            emitter.emit("onMemberChange", result_obj);
        }
        else if (type === 3) {
            result_obj.bc = json.bc;
            result_obj.channelid = json.channelid;
            result_obj.param1 = json.param1;
            result_obj.param2 = json.param2;
            result_obj.content = json.content;
            emitter.emit("onBroadcast", result_obj);
        }
        else if (type === 4) {
            result_obj.avtype = json.avtype;
            result_obj.userid = json.userid;
            result_obj.value = json.value;
            emitter.emit("onAVStatistic", result_obj);
        }

        msg = youme.youme_freeCbMessage2(msg);
    }
};

//开始周期性拉取回调信息
var interval = 20 * 1; // 
var pollingTask = null;


function startGetMsg() {
    if (pollingTask) {
        clearInterval(pollingTask);
    }
    pollingTask = setInterval(GetMsg, interval);
}

let glcanvasMap = {};
var MyWebGLCanvas;


function updateCanvas(userid, canvasid) {

    var canvas = document.getElementById(canvasid);

    if (canvas === undefined || canvas === null) {
        return;
    }

    var len = ref.alloc('int', 0);
    var width = ref.alloc('int', 12);
    var height = ref.alloc('int', 12);
    var fmt = ref.alloc('int', 1);

    //获取视频帧数据，bgra/yuv格式
    var value = youme.youme_getVideoFrameNew(userid, len, width, height, fmt);

    var size = len.deref();

    if (size !== 0) {
        width = ref.deref(width);
        height = ref.deref(height);
        var data = ref.reinterpret(value, size);

        fmt = ref.deref(fmt);

        var datas = new Uint8Array(data);

        var glcanvas = glcanvasMap[canvas.id];
        if (glcanvas !== undefined) {
            if (glcanvas.fmt === fmt) {
                glcanvas.decode(datas, width, height);
            }
            else {
                createWebGLCanvas(canvas, fmt);
            }
        }
        else {
            createWebGLCanvas(canvas, fmt);
        }
        datas = null;
    }
}

function createWebGLCanvas(canvas, fmt) {
    if (fmt === 0) {
        MyWebGLCanvas = new YUVWebGLCanvas(canvas, new Size(canvas.width, canvas.height));
        glcanvasMap[canvas.id] = MyWebGLCanvas;
    }
    else if (fmt === 1) {
        MyWebGLCanvas = new BGRAWebGLCanvas(canvas, new Size(canvas.width, canvas.height));
        glcanvasMap[canvas.id] = MyWebGLCanvas;
    }
    else {

    }
}



/**
 * 功能描述:初始化引擎
 * 这是一个异步调用接口，如果函数返回 YOUME_SUCCESS， 则需要等待以下事件回调达到才表明初始化完成
 * YOUME_EVENT_INIT_OK - 表明初始化成功
 * YOUME_EVENT_INIT_FAILED - 表明初始化失败，最常见的失败原因是网络错误或者 AppKey/AppSecret 错误
 *
 * @param strAPPKey - 从游密申请到的 app key, 这个你们应用程序的唯一标识
 * @param strAPPSecret - 对应 strAPPKey 的私钥, 这个需要妥善保存，不要暴露给其他人
 * @param serverRegionId -
 *        设置首选连接服务器的区域码
 *        如果在初始化时不能确定区域，可以填RTC_DEFAULT_SERVER，后面确定时通过 SetServerRegion 设置。
 *        如果YOUME_RTC_SERVER_REGION定义的区域码不能满足要求，可以把这个参数设为 RTC_EXT_SERVER，然后
 *        通过后面的参数 strExtServerRegionName 设置一个自定的区域值（如中国用 "cn" 或者 “ch"表示），然后把这个自定义的区域值同步给游密。
 *        我们将通过后台配置映射到最佳区域的服务器。
 * @pExtServerRegionName - 扩展的服务器区域简称
 *
 * @return - YOUME_SUCCESS
 *           其他返回值表明发生了错误，详见YouMeConstDefine.h定义
 */
function init(strAPPKey, strAPPSecret, serverRegionId, pExtServerRegionName) {
    return youme.youme_init(strAPPKey, strAPPSecret, serverRegionId, pExtServerRegionName);
}

/**
 *  功能描述：加入语音频道
 *
 *  @param strUserID: 用户ID，要保证全局唯一
 *  @param strChannelID: 频道ID，要保证全局唯一
 *  @param eUserRole: 用户角色，用于决定讲话/播放背景音乐等权限
 *
 *  @return 错误码，详见YouMeConstDefine.h定义
 */
function joinChannelSingleMode(strUserID, strChannelID, eUserRole) {
    return youme.youme_joinChannelSingleMode(strUserID, strChannelID, eUserRole);
}

/**
 * 功能描述:   设置是否由外部输入音视频
 * @param bInputModeEnabled: true:外部输入模式，false:SDK内部采集模式
 */
function setExternalInputMode(bInputModeEnabled) {
    youme.youme_setExternalInputMode(bInputModeEnabled);
}

/**
 *  功能描述: 设置音视频统计数据时间间隔
 *  @param interval:时间间隔
 */
function setAVStatisticInterval(interval) {
    youme.youme_setAVStatisticInterval(interval);
}

/**
 *  功能描述: 设置视频网络传输过程的分辨率,高分辨率
 *  @param width:宽
 *  @param height:高
 *  @return YOUME_SUCCESS - 成功
 *          其他 - 具体错误码
 */
function setVideoNetResolution(width, height) {
    return youme.youme_setVideoNetResolution(width, height);
}

/**
 *  功能描述: 设置本地视频渲染回调的分辨率,高分辨率
 *  @param width:宽
 *  @param height:高
 *  @return YOUME_SUCCESS - 成功
 *          其他 - 具体错误码
 */
function setVideoLocalResolution(width, height) {
    return youme.youme_setVideoLocalResolution(width, height);
}

//获取版本号
function getSDKVersion() {
    return youme.youme_getSDKVersion();
}

/**
 *  功能描述:退出所有语音频道
 *
 *  @return 错误码，详见YouMeConstDefine.h定义
 */
function leaveChannelAll() {
    glcanvasMap = {};
    return youme.youme_leaveChannelAll();
}

/**
 *  功能描述:设置身份验证的token
 *  @param strToken: 身份验证用token，设置为NULL或者空字符串，清空token值。
 *  @return 无
 */
function setToken(strToken) {
    youme.youme_setToken(strToken);
}

/**
 *  功能描述: 设置Audio的传输质量
 *  @param quality: 0: low 1: high
 *
 *  @return None
 */
function setAudioQuality(quality) {
    youme.youme_setAudioQuality(quality);
}

/**
 * 功能描述:反初始化引擎，在应用退出之前需要调用这个接口释放资源。
 *        这是一个同步调用接口，函数返回时表明操作已经完成。
 *
 * @return - YOUME_SUCCESS
 *           其他返回值表明发生了错误，详见YouMeConstDefine.h定义
 */
function unInit() {
    if (pollingTask) {
        clearInterval(pollingTask);
    }
    return youme.youme_unInit();
}

/**
 *  功能描述:设置音量，取值范围是[0-100] 100表示最大音量， 默认音量是100
 *  @param uiVolume: 音量
 *  @return 无
 */
function setVolume(uiVolume) {
    youme.youme_setVolume(uiVolume);
}

/**
 *  功能描述:获取音量大小,此音量值为程序内部的音量，与系统音量相乘得到程序使用的实际音量
 *
 *  @return 音量值[0,100]
 */
function getVolume() {
    return youme.youme_getVolume();
}

/**
 *  功能描述:麦克风 静音 打开/关闭
 *
 *  @param bOn:true——关闭麦克风，false——开启麦克风
 *  @return 无
 */
function setMicrophoneMute(bOn) {
    youme.youme_setMicrophoneMute(bOn);
}

/**
 *  功能描述:获取麦克风 静音 状态
 *
 *  @return true——关闭，false——打开
 */
function getMicrophoneMute() {
    return youme.youme_getMicrophoneMute();
}

/**
 *  功能描述:获取扬声器 静音 状态
 *
 *  @return true——关闭扬声器，false——开启扬声器
 */
function getSpeakerMute() {
    return youme.youme_getSpeakerMute();
}

/**
 *  功能描述:扬声器 静音 打开/关闭
 *
 *  @param bOn:true——关闭扬声器，false——开启扬声器
 *  @return 无
 */
function setSpeakerMute(bOn) {
    youme.youme_setSpeakerMute(bOn);
}

//设置他人麦克风状态
function setOtherMicMute(userid, mute) {
    return youme.youme_setOtherMicMute(userid, mute);
}

//设置他人扬声器状态
function setOtherSpeakerMute(userid, mute) {
    return youme.youme_setOtherSpeakerMute(userid, mute);
}

//设置是否听某人的语音。
function setListenOtherVoice(userid, ison) {
    return youme.youme_setListenOtherVoice(userid, ison);
}

/**
 *  功能描述: 设置日志等级
 *  @param consoleLevel: 控制台日志等级
 *  @param fileLevel: 文件日志等级
 */
function setLogLevel(consoleLevel, fileLevel) {
    return youme.youme_setLogLevel(consoleLevel, fileLevel);
}

//设置服务器区域
function setServerRegion(serverRegionId, strExtRegionName) {
    youme.youme_setServerRegion(serverRegionId, strExtRegionName);
}

// 停止捕获本机摄像头数据
function stopCapture() {
    return youme.youme_stopCapture();
}

// 开始捕获本机摄像头数据
function startCapture() {
    return youme.youme_startCapture();
}

//是否是测试模式,测试模式使用测试服
function setTestConfig(bTest) {
    youme.youme_setTestConfig(bTest);
}

/**
 *  功能描述:切换语音输出设备
 *  默认输出到扬声器，在加入房间成功后设置，如无听筒输出的需求尽量不要调用该接口。
 *
 *  @param bOutputToSpeaker:true——使用扬声器，false——使用听筒
 *  @return 错误码，详见YouMeConstDefine.h定义
 */
function setOutputToSpeaker(bOutputToSpeaker) {
    return youme.youme_setOutputToSpeaker(bOutputToSpeaker);
}

/**
 *  功能描述:设置是否通知其他人自己的开关麦克风和扬声器的状态
 *
 *  @param bAutoSend:true——通知，false——不通知
 *  @return 无
 */
function setAutoSendStatus(bAutoSend) {
    youme.youme_setAutoSendStatus(bAutoSend);
}

/**
 *  功能描述:启用/禁用移动网络
 *
 *  @param bEnabled:true-可以启用，false-禁用，默认禁用
 *
 *  @return 无
 */
function setUseMobileNetworkEnabled(bEnabled) {
    youme.youme_setUseMobileNetworkEnabled(bEnabled);
}

/**
 *  功能描述:是否可使用移动网络
 *
 *  @return true-可以使用，false-禁用
 */
function getUseMobileNetworkEnabled() {
    return youme.youme_getUseMobileNetworkEnabled();
}

/**
 *  功能描述: 设置用户自定义Log路径
 *  @param strFilePath Log文件的路径
 *  @return YOUME_SUCCESS - 成功
 *          其他 - 具体错误码
 */
function setUserLogPath(strFilePath) {
    return youme.youme_setUserLogPath(strFilePath);
}

// 播放背景音乐
function playBackgroundMusic(strFilePath, bRepeat) {
    return youme.youme_playBackgroundMusic(strFilePath, bRepeat);
}

// 暂停背景音乐
function pauseBackgroundMusic() {
    return youme.youme_pauseBackgroundMusic();
}

// 恢复背景音乐
function resumeBackgroundMusic() {
    return youme.youme_resumeBackgroundMusic();
}

// 停止背景音乐
function stopBackgroundMusic() {
    return youme.youme_stopBackgroundMusic();
}

// 设置背景音乐音量
function setBackgroundMusicVolume(vol) {
    return youme.youme_setBackgroundMusicVolume(vol);
}

// 设置是否将通过耳机监听自己的声音
function setHeadsetMonitorOn(micEnabled, bgmEnabled) {
    return youme.youme_setHeadsetMonitorOn(micEnabled, bgmEnabled);
}

// 设置是否设置主播混响模式
function setReverbEnabled(bEnabled) {
    return youme.youme_setReverbEnabled(bEnabled);
}

// 设置是否启动语音检测回调
function setVadCallbackEnabled(enabled) {
    return youme.youme_setVadCallbackEnabled(enabled);
}

// 设置是否启动讲话音量回调
function setMicLevelCallback(maxLevel) {
    return youme.youme_setMicLevelCallback(maxLevel);
}

// 设置是否启动远端语音音量回调
function setFarendVoiceLevelCallback(maxLevel) {
    return youme.youme_setFarendVoiceLevelCallback(maxLevel);
}

// 设置当麦克风静音时，是否释放麦克风设备，在初始化之后、加入房间之前调用
function setReleaseMicWhenMute(enabled) {
    return youme.youme_setReleaseMicWhenMute(enabled);
}

// 暂停通话，释放对麦克风等设备资源的占用
function pauseChannel() {
    return youme.youme_pauseChannel();
}

// 恢复通话
function resumeChannel() {
    return youme.youme_resumeChannel();
}

// 设置当前录音的时间戳
function setRecordingTimeMs(timeMs) {
    youme.youme_setRecordingTimeMs(timeMs);
}

// 设置当前播放的时间戳
function setPlayingTimeMs(timeMs) {
    youme.youme_setPlayingTimeMs(timeMs);
}

// 设置服务器模式
function setServerMode(mode) {
    youme.youme_setServerMode(mode);
}

//RestApi——支持主播相关信息查询
function requestRestApi(strCommand, strQueryBody, requestID) {
    return youme.youme_requestRestApi(strCommand, strQueryBody, requestID);
}

//查询频道当前的用户列表，maxCount表明最多获取多少，-1表示获取所有
function getChannelUserList(strChannelID, maxCount, notifyMemChange) {
    return youme.youme_getChannelUserList(strChannelID, maxCount, notifyMemChange);
}

// 进入房间后，切换身份
function setUserRole(userRole) {
    return youme.youme_setUserRole(userRole);
}

// 获取身份
function getUserRole() {
    return youme.youme_getUserRole();
}

// 背景音乐是否在播放
function isBackgroundMusicPlaying() {
    return youme.youme_isBackgroundMusicPlaying();
}

// 是否初始化成功
function isInited() {
    return youme.youme_isInited();
}

// 是否在某个语音房间内
function isInChannel(pChannelID) {
    return youme.youme_isInChannel(pChannelID);
}

/**
 * 功能描述:   向房间广播消息
 * @param pChannelID: 广播房间
 * @param pContent: 广播内容-文本串
 * @param requestID:返回消息标识，回调的时候会回传该值
 * @return   YOUME_SUCCESS - 成功
 *          其他 - 具体错误码
 */
function sendMessage(pChannelID, pContent, requestID) {
    return youme.youme_sendMessage(pChannelID, pContent, requestID);
}

/**
 *  功能描述: 把某人踢出房间
 *  @param  pUserID: 被踢的用户ID
 *  @param  pChannelID: 从哪个房间踢出
 *  @param  lastTime: 踢出后，多长时间内不允许再次进入
 *  @return YOUME_SUCCESS - 成功
 *          其他 - 具体错误码
 */
function kickOtherFromChannel(pUserID, pChannelID, lastTime) {
    return youme.youme_kickOtherFromChannel(pUserID, pChannelID, lastTime);
}

// 设置是否开启视频编码器
function openVideoEncoder(pFilePath) {
    return youme.youme_openVideoEncoder(pFilePath);
}

/**
*  功能描述: (七牛接口)将提供的音频数据混合到麦克风或者扬声器的音轨里面。
*  @param data 指向PCM数据的缓冲区
*  @param len  音频数据的大小
*  @param timestamp 时间戳
*  @return YOUME_SUCCESS - 成功
*          其他 - 具体错误码
*/
function inputAudioFrame(data, len, timestamp) {
    return youme.youme_inputAudioFrame(data, len, timestamp);
}

/**
*  功能描述: (七牛接口)将提供的视频数据到producer。
*  @param data 指向视频数据的缓冲区
*  @param len  视频数据的大小
* @param width  视频宽
* @param height  视频高
* @param fmt  视频格式
* @param rotation  视频角度
* @param mirror  镜像
*  @param timestamp 时间戳
*  @return YOUME_SUCCESS - 成功
*          其他 - 具体错误码
*/
function inputVideoFrame(data, len, width, height, fmt, rotation, mirror, timestamp) {
    return youme.youme_inputVideoFrame(data, len, width, height, fmt, rotation, mirror, timestamp);
}

/**
 * 功能描述: 停止视频数据输入(七牛接口，在youme_inputVideoFrame之后调用，房间内其它用户会收到YOUME_EVENT_OTHERS_VIDEO_INPUT_STOP事件)
 * @return YOUME_SUCCESS - 成功
 *         其他 - 具体错误码
 */
function stopInputVideoFrame() {
    return youme.youme_stopInputVideoFrame();
}

// 获取视频数据
function getVideoFrame(userId, len, width, height) {
    return youme.youme_getVideoFrame(userId, len, width, height);
}

// 设置视频回调
function setVideoCallback() {
    return youme.youme_setVideoCallback("");
}

/**
 *  功能描述: 设置帧率
 *  @param  fps:帧率（1-30），默认15帧，必须在设置分辨率之前调用
 *  @return YOUME_SUCCESS - 成功
 *          其他 - 具体错误码
 */
function setVideoFps(fps) {
    return youme.youme_setVideoFps(fps);
}

// 切换前后摄像头
function switchCamera() {
    return youme.youme_switchCamera();
}

/**
 *  功能描述: 权限检测结束后重置摄像头
 *  @param
 *  @return YOUME_SUCCESS - 成功
 *          其他 - 具体错误码
 */
function resetCamera() {
    return youme.youme_resetCamera();
}

// 设置是否前置摄像头
function setCaptureFrontCameraEnable(enable) {
    return youme.youme_setCaptureFrontCameraEnable(enable);
}

// 屏蔽/恢复某个UserId的视频流
function maskVideoByUserId(userid, mask) {
    return youme.youme_maskVideoByUserId(userid, mask);
}

/**
 *  功能描述: 设置外部输入模式的语音采样率
 *  @param inputSampleRate: 输入语音采样率
 *  @param mixedCallbackSampleRate: mix后输出语音采样率
 *  @return YOUME_SUCCESS - 成功
 *          其他 - 具体错误码
 */
function setExternalInputSampleRate(inputSampleRate, mixedCallbackSampleRate) {
    return youme.youme_setExternalInputSampleRate(inputSampleRate, mixedCallbackSampleRate);
}

/**
 *  功能描述: 设置视频网络传输过程的分辨率，低分辨率
 *  @param width:宽
 *  @param height:高
 *  @return YOUME_SUCCESS - 成功
 *          其他 - 具体错误码
 */
function setVideoNetResolutionForSecond(width, height) {
    return youme.youme_setVideoNetResolutionForSecond(width, height);
}

/**
 *  功能描述: 设置视频数据上行的码率的上下限,第二路(默认不传)
 *  @param maxBitrate: 最大码率，单位kbit/s.  0无效
 *  @param minBitrate: 最小码率，单位kbit/s.  0无效
 
 *  @return None
 *
 *  @warning:需要在进房间之前设置
 */
function setVideoCodeBitrateForSecond(maxBitrate, minBitrate) {
    youme.youme_setVideoCodeBitrateForSecond(maxBitrate, minBitrate);
}

/**
 *  功能描述: 获取视频数据上行的当前码率。
 *
 *  @return 视频数据上行的当前码率
 */
function getCurrentVideoCodeBitrate() {
    return youme.youme_getCurrentVideoCodeBitrate();
}

/**
 *  功能描述: 设置视频数据是否同意开启硬编硬解
 *  @param bEnable: true:开启，false:不开启
 *
 *  @return None
 *
 *  @note: 实际是否开启硬解，还跟服务器配置及硬件是否支持有关，要全部支持开启才会使用硬解。并且如果硬编硬解失败，也会切换回软解。
 *  @warning:需要在进房间之前设置
 */
function setVideoHardwareCodeEnable(bEnable) {
    youme.youme_setVideoHardwareCodeEnable(bEnable);
}

/**
 *  功能描述: 获取视频数据是否同意开启硬编硬解
 *  @return true:开启，false:不开启， 默认为true;
 *
 *  @note: 实际是否开启硬解，还跟服务器配置及硬件是否支持有关，要全部支持开启才会使用硬解。并且如果硬编硬解失败，也会切换回软解。
 */
function getVideoHardwareCodeEnable() {
    return youme.youme_getVideoHardwareCodeEnable();
}

/**
 *  功能描述: 设置视频无帧渲染的等待超时时间，超过这个时间会给上层回调
 *  @param timeout: 超时时间，单位为毫秒
*/
function setVideoNoFrameTimeout(timeout) {
    return youme.youme_setVideoNoFrameTimeout(timeout);
}

/**
 *  功能描述: 查询多个用户视频信息（支持分辨率）
 *  @param userList: 用户ID列表的json数组
 *  @return YOUME_SUCCESS - 成功
 *          其他 - 具体错误码
 */
function queryUsersVideoInfo(userList) {
    return youme.youme_queryUsersVideoInfo(userList);
}

/**
 *  功能描述: 设置多个用户视频信息（支持分辨率）
 *  @param videoinfoList: 用户对应分辨率列表的json数组
 *  @return YOUME_SUCCESS - 成功
 *          其他 - 具体错误码
 */
function setUsersVideoInfo(videoinfoList) {
    return youme.youme_setUsersVideoInfo(videoinfoList);
}

/**
 *  功能描述: 美颜开关，默认是关闭美颜
 *  @param open: true表示开启美颜，false表示关闭美颜
 *  @return YOUME_SUCCESS - 成功
 *          其他 - 具体错误码
 */
function openBeautify(open) {
    return youme.youme_openBeautify(open);
}

/**
 *  功能描述: 美颜强度参数设置
 *  @param param: 美颜参数，0.0 - 1.0 ，默认为0，几乎没有美颜效果，0.5左右效果明显
 *  @return YOUME_SUCCESS - 成功
 *          其他 - 具体错误码
 */
function beautifyChanged(param) {
    return youme.youme_beautifyChanged(param);
}

/**
 *  功能描述: 瘦脸开关
 *  @param param: true 开启瘦脸，false关闭，默认 false
 *  @return YOUME_SUCCESS - 成功
 *          其他 - 具体错误码
 */
function stretchFace(stretch) {
    return youme.youme_stretchFace(stretch);
}

/**
 *  功能描述: 调用后同步完成麦克风释放，只是为了方便使用 IM 的录音接口时切换麦克风使用权。
 *  @return bool - 成功
 */
function releaseMicSync() {
    return youme.youme_releaseMicSync();
}

/**
 *  功能描述: 调用后恢复麦克风到释放前的状态，只是为了方便使用 IM 的录音接口时切换麦克风使用权。
 *  @return bool - true 成功
 */
function resumeMicSync() {
    return youme.youme_resumeMicSync();
}

// 设置和流画布大小（不设置则默认为采集视频分辨率）
function setMixVideoSize(width, height) {
    youme.youme_setMixVideoSize(width, height);
}

//  获取摄像头个数。
function getCameraCount() {
    return youme.youme_getCameraCount();
}

//  获取cameraid 对应名称。
function getCameraName(cameraid) {
    var buf = new Buffer(100);
    buf.type = ref.types.CString;
    var len = youme.youme_getCameraName(cameraid, buf);
    var name = buf.slice(0, len).toString();

    return name;
}

// 设置打开摄像头id。
function setOpenCameraId(cameraid) {
    return youme.youme_setOpenCameraId(cameraid);
}

// 获取视频数据 带视频格式枚举 yuv/bgra/rgb24
function getVideoFrameNew(userId, len, width, height, fmt) {
    return youme.youme_getVideoFrameNew(userId, len, width, height, fmt);
}

function videoEngineModelEnabled(enabeld) {
    youme.youme_videoEngineModelEnabled(enabeld);
}



module.exports =
    {
        startGetMsg,
        emitter,
        init,
        joinChannelSingleMode,
        setExternalInputMode,
        setAVStatisticInterval,
        setVideoNetResolution,
        setVideoLocalResolution,
        getSDKVersion,
        unInit,
        setVolume,
        getVolume,
        setMicrophoneMute,
        getMicrophoneMute,
        getSpeakerMute,
        setSpeakerMute,
        setOtherMicMute,
        setOtherSpeakerMute,
        setListenOtherVoice,
        setLogLevel,
        setServerRegion,
        stopCapture,
        startCapture,
        setTestConfig,
        setOutputToSpeaker,
        setUseMobileNetworkEnabled,
        getUseMobileNetworkEnabled,
        setUserLogPath,
        playBackgroundMusic,
        pauseBackgroundMusic,
        resumeBackgroundMusic,
        stopBackgroundMusic,
        setBackgroundMusicVolume,
        setHeadsetMonitorOn,
        setReverbEnabled,
        setVadCallbackEnabled,
        setMicLevelCallback,
        setFarendVoiceLevelCallback,
        setReleaseMicWhenMute,
        pauseChannel,
        resumeChannel,
        setRecordingTimeMs,
        setPlayingTimeMs,
        requestRestApi,
        getChannelUserList,
        setUserRole,
        getUserRole,
        isBackgroundMusicPlaying,
        isInited,
        isInChannel,
        sendMessage,
        inputAudioFrame,
        inputVideoFrame,
        getVideoFrame,
        setVideoCallback,
        setVideoFps,
        switchCamera,
        setExternalInputSampleRate,
        setVideoNetResolutionForSecond,
        setVideoCodeBitrateForSecond,
        getCurrentVideoCodeBitrate,
        setVideoHardwareCodeEnable,
        getVideoHardwareCodeEnable,
        setVideoNoFrameTimeout,
        queryUsersVideoInfo,
        setUsersVideoInfo,
        openBeautify,
        beautifyChanged,
        stretchFace,
        releaseMicSync,
        resumeMicSync,
        setToken,
        setAudioQuality,
        stopInputVideoFrame,
        leaveChannelAll,
        setAutoSendStatus,
        setServerMode,
        kickOtherFromChannel,
        openVideoEncoder,
        resetCamera,
        setCaptureFrontCameraEnable,
        maskVideoByUserId,
        setMixVideoSize,
        getCameraCount,
        getCameraName,
        setOpenCameraId,
        getVideoFrameNew,
        videoEngineModelEnabled,
        updateCanvas
    }


/***/ }),

/***/ "./app/YouMeVideo.ts":
/*!***************************!*\
  !*** ./app/YouMeVideo.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var youme = __webpack_require__(/*! ./YouMeSDK */ "./app/YouMeSDK.js");
var ref = __webpack_require__(/*! ref */ "ref");
var YMLogUtils_1 = __webpack_require__(/*! ./YMLogUtils */ "./app/YMLogUtils.ts");
// 回调函数暂存
var loginCallback = null;
var joinRoomCallback = null;
var leaveRoomCallback = null;
var openMicroPhoneCallback = null;
var closeMicroPhoneCallback = null;
var openSpeakerCallback = null;
var closeSpeakerCallback = null;
var openCameraCallback = null;
var closeCameraCallback = null;
var pauseChannelCallback = null;
var resumeChannelCallback = null;
var maskVideoForUserCallback = {};
var resumeVideoForUserCallback = {};
var requestRestApiCallback = {};
var sendMessageCallback = {};
/**
 *判断是否为函数
 *
 * @param {*} fun
 * @returns
 */
function isFunction(fun) {
    return fun && typeof fun === 'function';
}
/**
 *
 * @export
 * @class YouMeVideo
 */
var YouMeVideo = /** @class */ (function () {
    function YouMeVideo() {
    }
    /**
     * 获取实例
     *
     * @static
     * @returns {YouMeVideo}
     */
    YouMeVideo.getInstance = function () {
        if (!this._instance) {
            // 事件循环
            youme.startGetMsg();
        }
        ;
        return this._instance || (this._instance = new YouMeVideo());
    };
    /**
     * 设置日志等级(JS层日志)
     *
     * @static
     * @param {number} level
     */
    YouMeVideo.setJSLogLevel = function (level) {
        YMLogUtils_1.YMLogUtils.setLogLevel(level);
    };
    /**
     * 获取日志等级(JS层日志)
     *
     * @static
     * @returns {number}
     */
    YouMeVideo.getJSLogLevel = function () {
        return YMLogUtils_1.YMLogUtils.getLogLevel();
    };
    /**
     * 初始化
     *
     * @param {string} strAppKey
     * @param {string} strAPPSecret
     * @param {number} serverRegionId
     * @param {string} pExtServerRegionName
     * @returns {void}
     */
    YouMeVideo.prototype.init = function (strAppKey, strAPPSecret, serverRegionId, pExtServerRegionName, callback) {
        if (isFunction(callback)) {
            loginCallback = callback;
        }
        var code = youme.init(strAppKey, strAPPSecret, serverRegionId, pExtServerRegionName);
        if (code !== 0) {
            if (isFunction(callback)) {
                callback(code);
            }
        }
        return code;
    };
    /**
     * 功能描述:反初始化引擎，在应用退出之前需要调用这个接口释放资源。
     *         这是一个同步调用接口，函数返回时表明操作已经完成。
     *
     * @returns  {number}
     *         其他返回值表明发生了错误，详见YouMeConstDefine.h定义
     */
    YouMeVideo.prototype.uninit = function () {
        return youme.uninit();
    };
    /**
     *  功能描述：加入语音频道
     *
     *  @param {string} strUserID: 用户ID，要保证全局唯一
     *  @param {string} strChannelID: 频道ID，要保证全局唯一
     *  @param {number} eUserRole: 用户角色，用于决定讲话/播放背景音乐等权限
     *
     *  @return 错误码，详见YouMeConstDefine.h定义
     */
    YouMeVideo.prototype.joinChannelSingleMode = function (strUserID, strChannelID, eUserRole, callback) {
        if (isFunction(callback)) {
            joinRoomCallback = callback;
        }
        var code = youme.joinChannelSingleMode(strUserID, strChannelID, eUserRole);
        if (code !== 0) {
            if (isFunction(callback)) {
                callback(code);
            }
        }
        return code;
    };
    /**
     *  功能描述:退出所有语音频道
     *
     *  @return 错误码，详见YouMeConstDefine.h定义
     */
    YouMeVideo.prototype.leaveChannelAll = function (callback) {
        if (callback) {
            leaveRoomCallback = callback;
        }
        var code = youme.leaveChannelAll();
        if (code !== 0) {
            if (isFunction(callback)) {
                callback(code);
            }
        }
        return code;
    };
    /**
     *  功能描述:麦克风 静音 打开/关闭
     *
     *  @param bOn:true——关闭麦克风，false——开启麦克风
     *  @return 无
     */
    YouMeVideo.prototype.setMicrophoneMute = function (bOn, callback) {
        if (callback) {
            if (bOn) {
                closeMicroPhoneCallback = callback;
            }
            else {
                openMicroPhoneCallback = callback;
            }
        }
        youme.setMicrophoneMute(bOn);
    };
    /**
     *  功能描述:获取麦克风 静音 状态
     *
     *  @return true——关闭，false——打开
     */
    YouMeVideo.prototype.getMicrophoneMute = function () {
        return youme.getMicrophoneMute();
    };
    /**
     *  功能描述:获取扬声器 静音 状态
     *
     *  @return true——关闭扬声器，false——开启扬声器
     */
    YouMeVideo.prototype.getSpeakerMute = function () {
        return youme.getSpeakerMute();
    };
    /**
     *  功能描述:扬声器 静音 打开/关闭
     *
     *  @param bOn:true——关闭扬声器，false——开启扬声器
     *  @return 无
     */
    YouMeVideo.prototype.setSpeakerMute = function (bOn, callback) {
        if (callback) {
            if (bOn) {
                closeSpeakerCallback = callback;
            }
            else {
                openSpeakerCallback = callback;
            }
        }
        youme.setSpeakerMute(bOn);
    };
    // 停止捕获本机摄像头数据
    YouMeVideo.prototype.stopCapture = function (callback) {
        if (isFunction(callback)) {
            closeCameraCallback = callback;
        }
        var code = youme.stopCapture();
        if (code !== 0) {
            if (isFunction(callback)) {
                callback(code);
            }
        }
        return code;
    };
    // 开始捕获本机摄像头数据
    YouMeVideo.prototype.startCapture = function (callback) {
        if (isFunction(callback)) {
            openCameraCallback = callback;
        }
        var code = youme.startCapture();
        if (code !== 0) {
            if (isFunction(callback)) {
                callback(code);
            }
        }
        return code;
    };
    /**
     * 功能描述:   设置是否由外部输入音视频
     * @param {boolean} bInputModeEnabled: true:外部输入模式，false:SDK内部采集模式 默认为false
     */
    YouMeVideo.prototype.setExternalInputMode = function (bInputModeEnabled) {
        youme.setExternalInputMode(bInputModeEnabled);
    };
    /**
     *  功能描述: 设置音视频统计数据时间间隔
     *  @param {number} interval:时间间隔 最低为500ms
     */
    YouMeVideo.prototype.setAVStatisticInterval = function (interval) {
        youme.setAVStatisticInterval(interval);
    };
    /**
     *  功能描述: 设置本地视频渲染回调的分辨率,高分辨率
     *  @param {number} width:宽
     *  @param {number} height:高
     *  @return {number}YOUME_SUCCESS - 成功
     *          其他 - 具体错误码
     */
    YouMeVideo.prototype.setVideoLocalResolution = function (width, height) {
        return youme.setVideoLocalResolution(width, height);
    };
    /**
     *  功能描述: 设置视频网络传输过程的分辨率,高分辨率
     *  @param {number} width:宽
     *  @param {number} height:高
     *  @return {number}YOUME_SUCCESS - 成功
     *          其他 - 具体错误码
     */
    YouMeVideo.prototype.setVideoNetResolution = function (width, height) {
        return youme.setVideoNetResolution(width, height);
    };
    // 设置和流画布大小（不设置则默认为采集视频分辨率）
    YouMeVideo.prototype.setMixVideoSize = function (width, height) {
        youme.setMixVideoSize(width, height);
    };
    //设为true返回bgr格式数据 设为false返回bgra/yuv格式 默认为true
    YouMeVideo.prototype.videoEngineModelEnabled = function (enabeld) {
        youme.videoEngineModelEnabled(enabeld);
    };
    //  获取摄像头个数。
    YouMeVideo.prototype.getCameraCount = function () {
        return youme.getCameraCount();
    };
    //  获取cameraid 对应名称。
    YouMeVideo.prototype.getCameraName = function (cameraid) {
        return youme.getCameraName(cameraid);
    };
    // 设置打开摄像头id。
    YouMeVideo.prototype.setOpenCameraId = function (cameraid) {
        return youme.setOpenCameraId(cameraid);
    };
    // 设置视频回调
    YouMeVideo.prototype.setVideoCallback = function () {
        return youme.setVideoCallback();
    };
    /**
     *  功能描述:设置是否通知其他人自己的开关麦克风和扬声器的状态
     *
     *  @param bAutoSend:true——通知，false——不通知
     *  @return 无
     */
    YouMeVideo.prototype.setAutoSendStatus = function (bAutoSend) {
        youme.setAutoSendStatus(bAutoSend);
    };
    /**
     *  功能描述:设置音量，取值范围是[0-100] 100表示最大音量， 默认音量是100
     *  @param uiVolume: 音量
     *  @return 无
     */
    YouMeVideo.prototype.setVolume = function (uiVolume) {
        youme.setVolume(uiVolume);
    };
    /**
     *  功能描述:获取音量大小,此音量值为程序内部的音量，与系统音量相乘得到程序使用的实际音量
     *
     *  @return 音量值[0,100]
     */
    YouMeVideo.prototype.getVolume = function () {
        return youme.getVolume();
    };
    // 获取视频数据
    YouMeVideo.prototype.getVideoFrame = function (userId, len, width, height) {
        return youme.getVideoFrame(userId, len, width, height);
    };
    // 获取视频数据 带视频格式枚举 yuv/bgra/rgb24
    YouMeVideo.prototype.getVideoFrameNew = function (userId, len, width, height, fmt) {
        return youme.getVideoFrameNew(userId, len, width, height, fmt);
    };
    // 暂停通话，释放对麦克风等设备资源的占用
    YouMeVideo.prototype.pauseChannel = function (callback) {
        if (isFunction(callback)) {
            pauseChannelCallback = callback;
        }
        var code = youme.pauseChannel();
        if (code !== 0) {
            if (isFunction(callback)) {
                callback(code);
            }
        }
        return code;
    };
    // 恢复通话
    YouMeVideo.prototype.resumeChannel = function (callback) {
        if (isFunction(callback)) {
            resumeChannelCallback = callback;
        }
        var code = youme.resumeChannel();
        if (code !== 0) {
            if (isFunction(callback)) {
                callback(code);
            }
        }
        return code;
    };
    // 屏蔽/恢复某个UserId的视频流
    YouMeVideo.prototype.maskVideoByUserId = function (userid, mask, callback) {
        var code = youme.maskVideoByUserId(userid, mask, function (err, obj) {
            if (code !== 0) {
                if (isFunction(callback)) {
                    callback(code);
                }
                return;
            }
            if (callback) {
                if (mask) {
                    maskVideoForUserCallback[userid] = callback;
                }
                else {
                    resumeVideoForUserCallback[userid] = callback;
                }
            }
        });
        return code;
    };
    //获取版本号
    YouMeVideo.prototype.getSDKVersion = function () {
        return youme.getSDKVersion();
    };
    /**
     *  功能描述:设置身份验证的token
     *  @param {string} strToken: 身份验证用token，设置为NULL或者空字符串，清空token值。
     *  @return 无
     */
    YouMeVideo.prototype.setToken = function (strToken) {
        youme.setToken(strToken);
    };
    /**
     *  功能描述: 设置Audio的传输质量
     *  @param quality: 0: low 1: high
     *
     *  @return None
     */
    YouMeVideo.prototype.setAudioQuality = function (quality) {
        youme.setAudioQuality(quality);
    };
    //设置他人麦克风状态
    YouMeVideo.prototype.setOtherMicMute = function (userid, mute) {
        return youme.setOtherMicMute(userid, mute);
    };
    //设置他人扬声器状态
    YouMeVideo.prototype.setOtherSpeakerMute = function (userid, mute) {
        return youme.setOtherSpeakerMute(userid, mute);
    };
    //设置是否听某人的语音。
    YouMeVideo.prototype.setListenOtherVoice = function (userid, ison) {
        return youme.setListenOtherVoice(userid, ison);
    };
    /**
     *  功能描述: 设置日志等级
     *  @param consoleLevel: 控制台日志等级
     *  @param fileLevel: 文件日志等级
     */
    YouMeVideo.prototype.setLogLevel = function (consoleLevel, fileLevel) {
        return youme.setLogLevel(consoleLevel, fileLevel);
    };
    //设置服务器区域
    YouMeVideo.prototype.setServerRegion = function (serverRegionId, strExtRegionName) {
        youme.setServerRegion(serverRegionId, strExtRegionName);
    };
    //是否是测试模式,测试模式使用测试服
    YouMeVideo.prototype.setTestConfig = function (bTest) {
        youme.setTestConfig(bTest);
    };
    /**
     *  功能描述:切换语音输出设备
     *  默认输出到扬声器，在加入房间成功后设置，如无听筒输出的需求尽量不要调用该接口。
     *
     *  @param bOutputToSpeaker:true——使用扬声器，false——使用听筒
     *  @return 错误码，详见YouMeConstDefine.h定义
     */
    YouMeVideo.prototype.setOutputToSpeaker = function (bOutputToSpeaker) {
        return youme.setOutputToSpeaker(bOutputToSpeaker);
    };
    /**
     *  功能描述:启用/禁用移动网络
     *
     *  @param bEnabled:true-可以启用，false-禁用，默认禁用
     *
     *  @return 无
     */
    YouMeVideo.prototype.setUseMobileNetworkEnabled = function (bEnabled) {
        youme.setUseMobileNetworkEnabled(bEnabled);
    };
    /**
     *  功能描述:是否可使用移动网络
     *
     *  @return true-可以使用，false-禁用
     */
    YouMeVideo.prototype.getUseMobileNetworkEnabled = function () {
        return youme.getUseMobileNetworkEnabled();
    };
    /**
     *  功能描述: 设置用户自定义Log路径
     *  @param strFilePath Log文件的路径
     *  @return YOUME_SUCCESS - 成功
     *          其他 - 具体错误码
     */
    YouMeVideo.prototype.setUserLogPath = function (strFilePath) {
        return youme.setUserLogPath(strFilePath);
    };
    // 播放背景音乐
    YouMeVideo.prototype.playBackgroundMusic = function (strFilePath, bRepeat) {
        return youme.playBackgroundMusic(strFilePath, bRepeat);
    };
    // 暂停背景音乐
    YouMeVideo.prototype.pauseBackgroundMusic = function () {
        return youme.pauseBackgroundMusic();
    };
    // 恢复背景音乐
    YouMeVideo.prototype.resumeBackgroundMusic = function () {
        return youme.resumeBackgroundMusic();
    };
    // 停止背景音乐
    YouMeVideo.prototype.stopBackgroundMusic = function () {
        return youme.stopBackgroundMusic();
    };
    // 设置背景音乐音量
    YouMeVideo.prototype.setBackgroundMusicVolume = function (vol) {
        return youme.setBackgroundMusicVolume(vol);
    };
    // 设置是否将通过耳机监听自己的声音
    YouMeVideo.prototype.setHeadsetMonitorOn = function (micEnabled, bgmEnabled) {
        return youme.setHeadsetMonitorOn(micEnabled, bgmEnabled);
    };
    // 设置是否设置主播混响模式
    YouMeVideo.prototype.setReverbEnabled = function (bEnabled) {
        return youme.setReverbEnabled(bEnabled);
    };
    // 设置是否启动语音检测回调
    YouMeVideo.prototype.setVadCallbackEnabled = function (enabled) {
        return youme.setVadCallbackEnabled(enabled);
    };
    // 设置是否启动讲话音量回调
    YouMeVideo.prototype.setMicLevelCallback = function (maxLevel) {
        return youme.setMicLevelCallback(maxLevel);
    };
    // 设置是否启动远端语音音量回调
    YouMeVideo.prototype.setFarendVoiceLevelCallback = function (maxLevel) {
        return youme.setFarendVoiceLevelCallback(maxLevel);
    };
    // 设置当麦克风静音时，是否释放麦克风设备，在初始化之后、加入房间之前调用
    YouMeVideo.prototype.setReleaseMicWhenMute = function (enabled) {
        return youme.setReleaseMicWhenMute(enabled);
    };
    // 设置当前录音的时间戳
    YouMeVideo.prototype.setRecordingTimeMs = function (timeMs) {
        youme.setRecordingTimeMs(timeMs);
    };
    // 设置当前播放的时间戳
    YouMeVideo.prototype.setPlayingTimeMs = function (timeMs) {
        youme.setPlayingTimeMs(timeMs);
    };
    // 设置服务器模式
    YouMeVideo.prototype.setServerMode = function (mode) {
        youme.setServerMode(mode);
    };
    //RestApi——支持主播相关信息查询
    YouMeVideo.prototype.requestRestApi = function (strCommand, strQueryBody, callback) {
        var iRequestId = ref.alloc(ref.types.ulonglong);
        var code = youme.requestRestApi(strCommand, strQueryBody, iRequestId);
        if (code !== 0) {
            if (isFunction(callback)) {
                callback(code);
            }
            return -1;
        }
        if (isFunction(callback)) {
            requestRestApiCallback[ref.deref(iRequestId)] = callback;
        }
        return ref.deref(iRequestId);
    };
    //查询频道当前的用户列表，maxCount表明最多获取多少，-1表示获取所有
    YouMeVideo.prototype.getChannelUserList = function (strChannelID, maxCount, notifyMemChange) {
        return youme.getChannelUserList(strChannelID, maxCount, notifyMemChange);
    };
    // 进入房间后，切换身份
    YouMeVideo.prototype.setUserRole = function (userRole) {
        return youme.setUserRole(userRole);
    };
    // 获取身份
    YouMeVideo.prototype.getUserRole = function () {
        return youme.getUserRole();
    };
    // 背景音乐是否在播放
    YouMeVideo.prototype.isBackgroundMusicPlaying = function () {
        return youme.isBackgroundMusicPlaying();
    };
    // 是否初始化成功
    YouMeVideo.prototype.isInited = function () {
        return youme.isInited();
    };
    // 是否在某个语音房间内
    YouMeVideo.prototype.isInChannel = function (pChannelID) {
        return youme.isInChannel(pChannelID);
    };
    /**
     * 功能描述:   向房间广播消息
     * @param pChannelID: 广播房间
     * @param pContent: 广播内容-文本串
     * @param requestID:返回消息标识，回调的时候会回传该值
     * @return   YOUME_SUCCESS - 成功
     *          其他 - 具体错误码
     */
    YouMeVideo.prototype.sendMessage = function (pChannelID, pContent, callback) {
        var iRequestId = ref.alloc(ref.types.ulonglong);
        var code = youme.sendMessage(pChannelID, pContent, iRequestId);
        if (code !== 0) {
            if (isFunction(callback)) {
                callback(code);
            }
            return -1;
        }
        if (isFunction(callback)) {
            sendMessageCallback[ref.deref(iRequestId)] = callback;
        }
        return ref.deref(iRequestId);
    };
    /**
     *  功能描述: 把某人踢出房间
     *  @param  pUserID: 被踢的用户ID
     *  @param  pChannelID: 从哪个房间踢出
     *  @param  lastTime: 踢出后，多长时间内不允许再次进入
     *  @return YOUME_SUCCESS - 成功
     *          其他 - 具体错误码
     */
    YouMeVideo.prototype.kickOtherFromChannel = function (pUserID, pChannelID, lastTime) {
        return youme.kickOtherFromChannel(pUserID, pChannelID, lastTime);
    };
    // 设置开启视频编码器
    YouMeVideo.prototype.openVideoEncoder = function (pFilePath) {
        return youme.openVideoEncoder(pFilePath);
    };
    /**
    *  功能描述: (七牛接口)将提供的音频数据混合到麦克风或者扬声器的音轨里面。
    *  @param data 指向PCM数据的缓冲区
    *  @param len  音频数据的大小
    *  @param timestamp 时间戳
    *  @return YOUME_SUCCESS - 成功
    *          其他 - 具体错误码
    */
    YouMeVideo.prototype.inputAudioFrame = function (data, len, timestamp) {
        return youme.inputAudioFrame(data, len, timestamp);
    };
    /**
    *  功能描述: (七牛接口)将提供的视频数据到producer。
    *  @param data 指向视频数据的缓冲区
    *  @param len  视频数据的大小
    * @param width  视频宽
    * @param height  视频高
    * @param fmt  视频格式
    * @param rotation  视频角度
    * @param mirror  镜像
    *  @param timestamp 时间戳
    *  @return YOUME_SUCCESS - 成功
    *          其他 - 具体错误码
    */
    YouMeVideo.prototype.inputVideoFrame = function (data, len, width, height, fmt, rotation, mirror, timestamp) {
        return youme.inputVideoFrame(data, len, width, height, fmt, rotation, mirror, timestamp);
    };
    /**
     * 功能描述: 停止视频数据输入(七牛接口，在inputVideoFrame之后调用，房间内其它用户会收到YOUME_EVENT_OTHERS_VIDEO_INPUT_STOP事件)
     * @return YOUME_SUCCESS - 成功
     *         其他 - 具体错误码
     */
    YouMeVideo.prototype.stopInputVideoFrame = function () {
        return youme.stopInputVideoFrame();
    };
    /**
     *  功能描述: 设置帧率
     *  @param  fps:帧率（1-30），默认15帧，必须在设置分辨率之前调用
     *  @return YOUME_SUCCESS - 成功
     *          其他 - 具体错误码
     */
    YouMeVideo.prototype.setVideoFps = function (fps) {
        return youme.setVideoFps(fps);
    };
    // 切换前后摄像头
    YouMeVideo.prototype.switchCamera = function () {
        return youme.switchCamera();
    };
    /**
     *  功能描述: 权限检测结束后重置摄像头
     *  @param
     *  @return YOUME_SUCCESS - 成功
     *          其他 - 具体错误码
     */
    YouMeVideo.prototype.resetCamera = function () {
        return youme.resetCamera();
    };
    // 设置是否前置摄像头
    YouMeVideo.prototype.setCaptureFrontCameraEnable = function (enable) {
        return youme.setCaptureFrontCameraEnable(enable);
    };
    /**
     *  功能描述: 设置外部输入模式的语音采样率
     *  @param inputSampleRate: 输入语音采样率
     *  @param mixedCallbackSampleRate: mix后输出语音采样率
     *  @return YOUME_SUCCESS - 成功
     *          其他 - 具体错误码
     */
    YouMeVideo.prototype.setExternalInputSampleRate = function (inputSampleRate, mixedCallbackSampleRate) {
        return youme.setExternalInputSampleRate(inputSampleRate, mixedCallbackSampleRate);
    };
    /**
     *  功能描述: 设置视频数据上行的码率的上下限,第二路(默认不传)
     *  @param maxBitrate: 最大码率，单位kbit/s.  0无效
     *  @param minBitrate: 最小码率，单位kbit/s.  0无效
     
     *  @return None
     *
     *  @warning:需要在进房间之前设置
     */
    YouMeVideo.prototype.setVideoCodeBitrateForSecond = function (maxBitrate, minBitrate) {
        youme.setVideoCodeBitrateForSecond(maxBitrate, minBitrate);
    };
    /**
     *  功能描述: 获取视频数据上行的当前码率。
     *
     *  @return 视频数据上行的当前码率
     */
    YouMeVideo.prototype.getCurrentVideoCodeBitrate = function () {
        return youme.getCurrentVideoCodeBitrate();
    };
    /**
     *  功能描述: 设置视频数据是否同意开启硬编硬解
     *  @param bEnable: true:开启，false:不开启
     *
     *  @return None
     *
     *  @note: 实际是否开启硬解，还跟服务器配置及硬件是否支持有关，要全部支持开启才会使用硬解。并且如果硬编硬解失败，也会切换回软解。
     *  @warning:需要在进房间之前设置
     */
    YouMeVideo.prototype.setVideoHardwareCodeEnable = function (bEnable) {
        youme.setVideoHardwareCodeEnable(bEnable);
    };
    /**
     *  功能描述: 获取视频数据是否同意开启硬编硬解
     *  @return true:开启，false:不开启， 默认为true;
     *
     *  @note: 实际是否开启硬解，还跟服务器配置及硬件是否支持有关，要全部支持开启才会使用硬解。并且如果硬编硬解失败，也会切换回软解。
     */
    YouMeVideo.prototype.getVideoHardwareCodeEnable = function () {
        return youme.getVideoHardwareCodeEnable();
    };
    /**
     *  功能描述: 设置视频无帧渲染的等待超时时间，超过这个时间会给上层回调
     *  @param timeout: 超时时间，单位为毫秒
    */
    YouMeVideo.prototype.setVideoNoFrameTimeout = function (timeout) {
        return youme.setVideoNoFrameTimeout(timeout);
    };
    /**
     *  功能描述: 查询多个用户视频信息（支持分辨率）
     *  @param userList: 用户ID列表的json数组
     *  @return YOUME_SUCCESS - 成功
     *          其他 - 具体错误码
     */
    YouMeVideo.prototype.queryUsersVideoInfo = function (userList) {
        return youme.queryUsersVideoInfo(userList);
    };
    /**
     *  功能描述: 设置多个用户视频信息（支持分辨率）
     *  @param videoinfoList: 用户对应分辨率列表的json数组
     *  @return YOUME_SUCCESS - 成功
     *          其他 - 具体错误码
     */
    YouMeVideo.prototype.setUsersVideoInfo = function (videoinfoList) {
        return youme.setUsersVideoInfo(videoinfoList);
    };
    /**
     *  功能描述: 美颜开关，默认是关闭美颜
     *  @param open: true表示开启美颜，false表示关闭美颜
     *  @return YOUME_SUCCESS - 成功
     *          其他 - 具体错误码
     */
    YouMeVideo.prototype.openBeautify = function (open) {
        return youme.openBeautify(open);
    };
    /**
     *  功能描述: 美颜强度参数设置
     *  @param param: 美颜参数，0.0 - 1.0 ，默认为0，几乎没有美颜效果，0.5左右效果明显
     *  @return YOUME_SUCCESS - 成功
     *          其他 - 具体错误码
     */
    YouMeVideo.prototype.beautifyChanged = function (param) {
        return youme.beautifyChanged(param);
    };
    /**
     *  功能描述: 瘦脸开关
     *  @param param: true 开启瘦脸，false关闭，默认 false
     *  @return YOUME_SUCCESS - 成功
     *          其他 - 具体错误码
     */
    YouMeVideo.prototype.stretchFace = function (stretch) {
        return youme.stretchFace(stretch);
    };
    /**
     *  功能描述: 调用后同步完成麦克风释放，只是为了方便使用 IM 的录音接口时切换麦克风使用权。
     *  @return bool - 成功
     */
    YouMeVideo.prototype.releaseMicSync = function () {
        return youme.releaseMicSync();
    };
    /**
     *  功能描述: 调用后恢复麦克风到释放前的状态，只是为了方便使用 IM 的录音接口时切换麦克风使用权。
     *  @return bool - true 成功
     */
    YouMeVideo.prototype.resumeMicSync = function () {
        return youme.resumeMicSync();
    };
    YouMeVideo.prototype.updateCanvas = function (userid, canvasid) {
        youme.updateCanvas(userid, canvasid);
    };
    /////////////////////////////////////////////// 需要对外暴露的事件
    YouMeVideo.prototype.on = function (event, callback) {
        if (!isFunction(callback)) {
            YMLogUtils_1.YMLogUtils.LOGE('param error! sencond param should be a function!, please check your code');
            return;
        }
        youme.emitter.on(event, callback);
        /*
                switch (event) {
                    case 'YOUME_EVENT_RECONNECTING':  // 断网了，正在重连
                    case 'YOUME_EVENT_RECONNECTED': // 断网重连成功
                    case 'YOUME_EVENT_REC_PERMISSION_STATUS': // 通知录音权限状态，成功获取权限时错误码为YOUME_SUCCESS，获取失败为YOUME_ERROR_REC_NO_PERMISSION（此时不管麦克风mute状态如何，都没有声音输出）
                    case 'YOUME_EVENT_BGM_STOPPED': // 通知背景音乐播放结束
                    case 'YOUME_EVENT_BGM_FAILED': // 通知背景音乐播放失败
                    case 'YOUME_EVENT_OTHERS_MIC_ON': // 其他用户麦克风打开
                    case 'YOUME_EVENT_OTHERS_MIC_OFF': // 其他用户麦克风关闭
                    case 'YOUME_EVENT_OTHERS_SPEAKER_ON': // 其他用户扬声器打开
                    case 'YOUME_EVENT_OTHERS_SPEAKER_OFF': // 其他用户扬声器关闭
                    case 'YOUME_EVENT_OTHERS_VOICE_ON': // 其他用户进入讲话状态
                    case 'YOUME_EVENT_OTHERS_VOICE_OFF': // 其他用户进入静默状态
                    case 'YOUME_EVENT_MY_MIC_LEVEL': // 麦克风的语音级别
                    case 'YOUME_EVENT_MIC_CTR_ON': // 麦克风被其他用户打开
                    case 'YOUME_EVENT_MIC_CTR_OFF': // 麦克风被其他用户关闭
                    case 'YOUME_EVENT_SPEAKER_CTR_ON': // 扬声器被其他用户打开
                    case 'YOUME_EVENT_SPEAKER_CTR_OFF': // 扬声器被其他用户关闭
                    case 'YOUME_EVENT_LISTEN_OTHER_ON': // 取消屏蔽某人语音
                    case 'YOUME_EVENT_LISTEN_OTHER_OFF': // 屏蔽某人语音
                    case 'YOUME_EVENT_MESSAGE_NOTIFY': // 收到Message, param为message内容
                    case 'YOUME_EVENT_KICK_RESULT': // 踢人的应答
                    case 'YOUME_EVENT_KICK_NOTIFY': // 被踢通知   ,param: （踢人者ID，被踢原因，被禁时间）
                    case 'YOUME_EVENT_FAREND_VOICE_LEVEL': // 远端说话人音量大小
                    case 'YOUME_EVENT_OTHERS_BE_KICKED': // 房间里其他人被踢出房间
        
                    case 'YOUME_EVENT_OTHERS_VIDEO_ON': // 收到其它用户的视频流
                    case 'YOUME_EVENT_MASK_VIDEO_BY_OTHER_USER': // 视频被其他用户屏蔽
                    case 'YOUME_EVENT_RESUME_VIDEO_BY_OTHER_USER': // 视频被其他用户恢复
                    case 'YOUME_EVENT_OTHERS_VIDEO_SHUT_DOWN': // 其它用户的视频流断开（包含网络中断的情况）
                    case 'YOUME_EVENT_OTHERS_VIDEO_INPUT_START': // 其他用户视频输入开始（内部采集下开启摄像头)
                    case 'YOUME_EVENT_OTHERS_VIDEO_INPUT_STOP': // 其他用户视频输入停止（内部采集下停止摄像头)
                    case 'YOUME_EVENT_MEDIA_DATA_ROAD_PASS': // 音视频数据通路连通，定时检测，一开始收到数据会收到PASS事件，之后变化的时候会发送
                    case 'YOUME_EVENT_MEDIA_DATA_ROAD_BLOCK': // 音视频数据通路不通
                    case 'YOUME_EVENT_QUERY_USERS_VIDEO_INFO': // 查询用户视频信息返回
                    case 'YOUME_EVENT_SET_USERS_VIDEO_INFO': // 设置用户接收视频信息返回
        
                    case 'YOUME_EVENT_OTHERS_DATA_ERROR': // 数据错误
                    case 'YOUME_EVENT_OTHERS_NETWORK_BAD': // 网络不好
                    case 'YOUME_EVENT_OTHERS_BLACK_FULL': // 黑屏
                    case 'YOUME_EVENT_OTHERS_GREEN_FULL': // 绿屏
                    case 'YOUME_EVENT_OTHERS_BLACK_BORDER': // 黑边
                    case 'YOUME_EVENT_OTHERS_GREEN_BORDER': // 绿边
                    case 'YOUME_EVENT_OTHERS_BLURRED_SCREEN': // 花屏
                    case 'YOUME_EVENT_OTHERS_ENCODER_ERROR': // 编码错误
                    case 'YOUME_EVENT_OTHERS_DECODER_ERROR': // 解码错误
        
                    case 'YOUME_EVENT_CAMERA_DEVICE_CONNECT': // 摄像头设备插入，移动端无效
                    case 'YOUME_EVENT_CAMERA_DEVICE_DISCONNECT': // 摄像头设备拔出，移动端无效
                        youme.emitter.on(event, callback);
                        break;
        
                    default:
                        break;
                }*/
    };
    return YouMeVideo;
}());
exports.default = YouMeVideo;
/**
* 初始化成功
*/
youme.emitter.on('YOUME_EVENT_INIT_OK', function (obj) {
    YMLogUtils_1.YMLogUtils.LOGI('INIT_OK', obj);
    if (isFunction(loginCallback)) {
        loginCallback(obj.errorcode, obj);
        loginCallback = null;
    }
    ;
});
/**
* 初始化失败
*/
youme.emitter.on('YOUME_EVENT_INIT_FAILED', function (obj) {
    YMLogUtils_1.YMLogUtils.LOGI('INIT_FAILED', obj);
    if (isFunction(loginCallback)) {
        loginCallback(obj.errorcode, obj);
        loginCallback = null;
    }
    ;
});
/**
* 加入房间成功
*/
youme.emitter.on('YOUME_EVENT_JOIN_OK', function (obj) {
    YMLogUtils_1.YMLogUtils.LOGI('JOIN_OK', obj);
    if (isFunction(joinRoomCallback)) {
        joinRoomCallback(obj.errorcode, obj);
        joinRoomCallback = null;
    }
    ;
});
/**
* 加入房间失败
*/
youme.emitter.on('YOUME_EVENT_JOIN_FAILED', function (obj) {
    YMLogUtils_1.YMLogUtils.LOGI('JOIN_FAILED', obj);
    if (isFunction(joinRoomCallback)) {
        joinRoomCallback(obj.errorcode, obj);
        joinRoomCallback = null;
    }
    ;
});
/**
* 离开房间成功
*/
youme.emitter.on('YOUME_EVENT_LEAVED_ALL', function (obj) {
    YMLogUtils_1.YMLogUtils.LOGI('LEAVED_ALL', obj);
    if (isFunction(leaveRoomCallback)) {
        leaveRoomCallback(obj.errorcode, obj);
        leaveRoomCallback = null;
    }
    ;
});
/**
* 自己的麦克风打开
*/
youme.emitter.on('YOUME_EVENT_LOCAL_MIC_ON', function (obj) {
    YMLogUtils_1.YMLogUtils.LOGI('LOCAL_MIC_ON', obj);
    if (isFunction(openMicroPhoneCallback)) {
        openMicroPhoneCallback(obj.errorcode, obj);
        openMicroPhoneCallback = null;
    }
    ;
});
/**
* 自己的麦克风关闭
*/
youme.emitter.on('YOUME_EVENT_LOCAL_MIC_OFF', function (obj) {
    YMLogUtils_1.YMLogUtils.LOGI('LOCAL_MIC_OFF', obj);
    if (isFunction(closeMicroPhoneCallback)) {
        closeMicroPhoneCallback(obj.errorcode, obj);
        closeMicroPhoneCallback = null;
    }
    ;
});
/**
* 自己的扬声器打开
*/
youme.emitter.on('YOUME_EVENT_LOCAL_SPEAKER_ON', function (obj) {
    YMLogUtils_1.YMLogUtils.LOGI('LOCAL_SPEAKER_ON', obj);
    if (isFunction(openSpeakerCallback)) {
        openSpeakerCallback(obj.errorcode, obj);
        openSpeakerCallback = null;
    }
    ;
});
/**
* 自己的扬声器关闭
*/
youme.emitter.on('YOUME_EVENT_LOCAL_SPEAKER_OFF', function (obj) {
    YMLogUtils_1.YMLogUtils.LOGI('LOCAL_SPEAKER_OFF', obj);
    if (isFunction(closeSpeakerCallback)) {
        closeSpeakerCallback(obj.errorcode, obj);
        closeSpeakerCallback = null;
    }
    ;
});
/**
* 自己的摄像头开启
*/
youme.emitter.on('YOUME_EVENT_LOCAL_VIDEO_INPUT_START', function (obj) {
    YMLogUtils_1.YMLogUtils.LOGI('VIDEO_INPUT_START', obj);
    if (isFunction(openCameraCallback)) {
        openCameraCallback(obj.errorcode, obj);
        openCameraCallback = null;
    }
    ;
});
/**
* 自己的摄像头关闭
*/
youme.emitter.on('YOUME_EVENT_LOCAL_VIDEO_INPUT_STOP', function (obj) {
    YMLogUtils_1.YMLogUtils.LOGI('VIDEO_INPUT_STOP', obj);
    if (isFunction(closeCameraCallback)) {
        closeCameraCallback(obj.errorcode, obj);
        closeCameraCallback = null;
    }
    ;
});
/**
* 暂停频道完成
*/
youme.emitter.on('YOUME_EVENT_PAUSED', function (obj) {
    YMLogUtils_1.YMLogUtils.LOGI('YOUME_EVENT_PAUSED', obj);
    if (isFunction(pauseChannelCallback)) {
        pauseChannelCallback(obj.errorcode, obj);
        pauseChannelCallback = null;
    }
    ;
});
/**
* 恢复频道完成
*/
youme.emitter.on('YOUME_EVENT_RESUMED', function (obj) {
    YMLogUtils_1.YMLogUtils.LOGI('YOUME_EVENT_RESUMED', obj);
    if (isFunction(resumeChannelCallback)) {
        resumeChannelCallback(obj.errorcode, obj);
        resumeChannelCallback = null;
    }
    ;
});
/**
* 屏蔽某人的视频
*/
youme.emitter.on('YOUME_EVENT_MASK_VIDEO_FOR_USER', function (obj) {
    YMLogUtils_1.YMLogUtils.LOGI('MASK_VIDEO_FOR_USER', obj);
    if (isFunction(maskVideoForUserCallback[obj.param])) {
        maskVideoForUserCallback[obj.param](obj.errorcode, obj);
        delete maskVideoForUserCallback[obj.param];
    }
    ;
});
/**
* 恢复某人的视频
*/
youme.emitter.on('YOUME_EVENT_RESUME_VIDEO_FOR_USER', function (obj) {
    YMLogUtils_1.YMLogUtils.LOGI('RESUME_VIDEO_FOR_USER', obj);
    if (isFunction(resumeVideoForUserCallback[obj.param])) {
        resumeVideoForUserCallback[obj.param](obj.errorcode, obj);
        delete resumeVideoForUserCallback[obj.param];
    }
    ;
});
/**
* sendMessage成功与否的通知，param为回传的requestID
*/
youme.emitter.on('YOUME_EVENT_SEND_MESSAGE_RESULT', function (obj) {
    YMLogUtils_1.YMLogUtils.LOGI('SEND_MESSAGE_RESULT', obj);
    if (isFunction(sendMessageCallback[obj.param])) {
        sendMessageCallback[obj.param](obj.errorcode, obj);
        delete sendMessageCallback[obj.param];
    }
    ;
});
/**
* onRequestRestAPI回调
*/
youme.emitter.on('onRequestRestAPI', function (obj) {
    YMLogUtils_1.YMLogUtils.LOGI('onRequestRestAPI', obj);
    if (isFunction(requestRestApiCallback[obj.requestid])) {
        requestRestApiCallback[obj.requestid](obj.errorcode, obj);
        delete requestRestApiCallback[obj.requestid];
    }
    ;
});


/***/ }),

/***/ "./app/canvas/BGRAWebGLCanvas.js":
/*!***************************************!*\
  !*** ./app/canvas/BGRAWebGLCanvas.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Program     = __webpack_require__(/*! ./Program */ "./app/canvas/Program.js");
var Size        = __webpack_require__(/*! ../utils/Size */ "./app/utils/Size.js");
var Shader      = __webpack_require__(/*! ./Shader */ "./app/canvas/Shader.js");
var Texture     = __webpack_require__(/*! ./Texture */ "./app/canvas/Texture.js");
var Script      = __webpack_require__(/*! ./Script */ "./app/canvas/Script.js");
var WebGLCanvas = __webpack_require__(/*! ./WebGLCanvas */ "./app/canvas/WebGLCanvas.js");

var Class       = __webpack_require__(/*! uclass */ "./node_modules/uclass/uClass.js");

var vertexShaderScript = Script.createFromSource("x-shader/x-vertex", " \
  attribute vec3 aVertexPosition; \
  attribute vec2 aTextureCoord; \
  uniform mat4 uMVMatrix; \
  uniform mat4 uPMatrix; \
  varying highp vec2 vTextureCoord; \
  void main(void) { \
    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0); \
    vTextureCoord = aTextureCoord; \
  } \
");


var fragmentShaderScript = Script.createFromSource("x-shader/x-fragment", " \
  precision highp float; \
  varying highp vec2 vTextureCoord; \
  uniform sampler2D texture; \
  void main(void) { \
    gl_FragColor = texture2D(texture, vTextureCoord).bgra; \
  } \
");




var BGRAWebGLCanvas = new Class({
  Extends  : WebGLCanvas,
  Binds : ['decode'],

  initialize : function(canvas, size) {
    this.canvas = canvas;
    this.canvas.width = size.w;
    this.canvas.height = size.h;
    this.fmt = 1;
  },

  resize : function (size) {
    if (this.size && this.size.w === size.w && this.size.h === size.h) return;

    BGRAWebGLCanvas.parent.initialize.call(this, this.canvas, size);
  },

  onInitShaders: function() {
    this.program = new Program(this.gl);
    this.program.attach(new Shader(this.gl, vertexShaderScript));
    this.program.attach(new Shader(this.gl, fragmentShaderScript));
    this.program.link();
    this.program.use();
    this.vertexPositionAttribute = this.program.getAttributeLocation("aVertexPosition");
    this.gl.enableVertexAttribArray(this.vertexPositionAttribute);
    this.textureCoordAttribute = this.program.getAttributeLocation("aTextureCoord");
    this.gl.enableVertexAttribArray(this.textureCoordAttribute);
  },

  onInitTextures: function () {
    var gl = this.gl;
    this.texture = new Texture(gl, this.size, gl.RGBA);
  },

  onInitSceneTextures: function () {
    this.texture.bind(0, this.program, "texture");
  },

  fillBGRATextures: function(bgra) {
    this.texture.fill(bgra);
  },

  decode: function(buffer, width, height) {

    if (!buffer)
      return;

    this.resize(new Size(width, height));

    var lumaSize = width * height * 4;

    this.texture.fill(buffer.subarray(0, lumaSize));
    this.drawScene();
  },

  toString: function() {
    return "BRGACanvas Size: " + this.size;
  }
});





module.exports = BGRAWebGLCanvas;


/***/ }),

/***/ "./app/canvas/Program.js":
/*!*******************************!*\
  !*** ./app/canvas/Program.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var assert = __webpack_require__(/*! ../utils/assert */ "./app/utils/assert.js");


function Program(gl) {
  this.gl = gl;
  this.program = this.gl.createProgram();
}

Program.prototype = {
  attach: function (shader) {
    this.gl.attachShader(this.program, shader.shader);
  }, 
  link: function () {
    this.gl.linkProgram(this.program);
    // If creating the shader program failed, alert.
    assert(this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS),
           "Unable to initialize the shader program.");
  },
  use: function () {
    this.gl.useProgram(this.program);
  },
  getAttributeLocation: function(name) {
    return this.gl.getAttribLocation(this.program, name);
  },
  setMatrixUniform: function(name, array) {
    var uniform = this.gl.getUniformLocation(this.program, name);
    this.gl.uniformMatrix4fv(uniform, false, array);
  }
};
module.exports = Program;



/***/ }),

/***/ "./app/canvas/Script.js":
/*!******************************!*\
  !*** ./app/canvas/Script.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(/*! ../utils/assert */ "./app/utils/assert.js");

/**
 * Represents a WebGL shader script.
 */

function Script() {}

Script.createFromElementId = function(id) {
  var script = document.getElementById(id);
  
  // Didn't find an element with the specified ID, abort.
  assert(script , "Could not find shader with ID: " + id);
  
  // Walk through the source element's children, building the shader source string.
  var source = "";
  var currentChild = script .firstChild;
  while(currentChild) {
    if (currentChild.nodeType == 3) {
      source += currentChild.textContent;
    }
    currentChild = currentChild.nextSibling;
  }
  
  var res = new Scriptor();
  res.type = script.type;
  res.source = source;
  return res;
};

Script.createFromSource = function(type, source) {
  var res = new Script();
  res.type = type;
  res.source = source;
  return res;
}


module.exports = Script;

/***/ }),

/***/ "./app/canvas/Shader.js":
/*!******************************!*\
  !*** ./app/canvas/Shader.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var error = __webpack_require__(/*! ../utils/error */ "./app/utils/error.js");

/**
 * Represents a WebGL shader object and provides a mechanism to load shaders from HTML
 * script tags.
 */


function Shader(gl, script) {
  
  // Now figure out what type of shader script we have, based on its MIME type.
  if (script.type == "x-shader/x-fragment") {
    this.shader = gl.createShader(gl.FRAGMENT_SHADER);
  } else if (script.type == "x-shader/x-vertex") {
    this.shader = gl.createShader(gl.VERTEX_SHADER);
  } else {
    error("Unknown shader type: " + script.type);
    return;
  }
  
  // Send the source to the shader object.
  gl.shaderSource(this.shader, script.source);
  
  // Compile the shader program.
  gl.compileShader(this.shader);
  
  // See if it compiled successfully.
  if (!gl.getShaderParameter(this.shader, gl.COMPILE_STATUS)) {
    error("An error occurred compiling the shaders: " + gl.getShaderInfoLog(this.shader));
    return;
  }
}
module.exports = Shader;





/***/ }),

/***/ "./app/canvas/Texture.js":
/*!*******************************!*\
  !*** ./app/canvas/Texture.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(/*! ../utils/assert */ "./app/utils/assert.js");

/**
 * Represents a WebGL texture object.
 */

function Texture(gl, size, format) {
  this.gl = gl;
  this.size = size;
  this.texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, this.texture);
  this.format = format ? format : gl.LUMINANCE; 
  gl.texImage2D(gl.TEXTURE_2D, 0, this.format, size.w, size.h, 0, this.format, gl.UNSIGNED_BYTE, null);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
}

var textureIDs = null;
Texture.prototype = {
  fill: function(textureData, useTexSubImage2D) {
    var gl = this.gl;
    assert(textureData.length >= this.size.w * this.size.h, 
           "Texture size mismatch, data:" + textureData.length + ", texture: " + this.size.w * this.size.h);
           gl.bindTexture(gl.TEXTURE_2D, this.texture);
    if (1) {

      gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, this.size.w , this.size.h, this.format, gl.UNSIGNED_BYTE, textureData);
    } else {}
  },
  bind: function(n, program, name) {
    var gl = this.gl;
    if (!textureIDs) {
      textureIDs = [gl.TEXTURE0, gl.TEXTURE1, gl.TEXTURE2];
    }
    gl.activeTexture(textureIDs[n]);
    gl.bindTexture(gl.TEXTURE_2D, this.texture);
    gl.uniform1i(gl.getUniformLocation(program.program, name), n);
  }
};
module.exports = Texture;



/***/ }),

/***/ "./app/canvas/WebGLCanvas.js":
/*!***********************************!*\
  !*** ./app/canvas/WebGLCanvas.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Generic WebGL backed canvas that sets up: a quad to paint a texture on, appropriate vertex/fragment shaders,
 * scene parameters and other things. Specialized versions of this class can be created by overriding several 
 * initialization methods.

 */

var Script = __webpack_require__(/*! ./Script */ "./app/canvas/Script.js");
var error  = __webpack_require__(/*! ../utils/error */ "./app/utils/error.js");
var makePerspective  = __webpack_require__(/*! ../utils/glUtils */ "./app/utils/glUtils.js").makePerspective;
var Matrix = __webpack_require__(/*! sylvester.js */ "./node_modules/sylvester.js/lib/index.js").Matrix;
var Class  = __webpack_require__(/*! uclass */ "./node_modules/uclass/uClass.js");
var Program = __webpack_require__(/*! ./Program */ "./app/canvas/Program.js");
var Shader = __webpack_require__(/*! ./Shader */ "./app/canvas/Shader.js");
var Texture = __webpack_require__(/*! ./Texture */ "./app/canvas/Texture.js");

var fmt = 0;
  

var vertexShaderScript = Script.createFromSource("x-shader/x-vertex", " \
  attribute vec3 aVertexPosition; \
  attribute vec2 aTextureCoord; \
  uniform mat4 uMVMatrix; \
  uniform mat4 uPMatrix; \
  varying highp vec2 vTextureCoord; \
  void main(void) { \
    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0); \
    vTextureCoord = aTextureCoord; \
  } \
");

var fragmentShaderScript = Script.createFromSource("x-shader/x-fragment", " \
  precision highp float; \
  varying highp vec2 vTextureCoord; \
  uniform sampler2D texture; \
  void main(void) { \
    gl_FragColor = texture2D(texture, vTextureCoord); \
  } \
");

var WebGLCanvas = new Class({

  initialize : function(canvas, size, useFrameBuffer) {

    this.canvas = canvas;
    this.size = size;
    this.canvas.width = size.w;
    this.canvas.height = size.h;

    this.onInitWebGL();

    this.onInitShaders();
    this.initBuffers();

    if (useFrameBuffer)
      this.initFramebuffer();

    this.onInitTextures();
    this.initScene();
  },

/**
 * Initialize a frame buffer so that we can render off-screen.
 */
  initFramebuffer : function() {

    var gl = this.gl;

    // Create framebuffer object and texture.
    this.framebuffer = gl.createFramebuffer(); 
    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
    this.framebufferTexture = new Texture(this.gl, this.size, gl.RGBA);

    // Create and allocate renderbuffer for depth data.
    var renderbuffer = gl.createRenderbuffer();
    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.size.w, this.size.h);

    // Attach texture and renderbuffer to the framebuffer.
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.framebufferTexture.texture, 0);
    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);
  },



/**
 * Initialize vertex and texture coordinate buffers for a plane.
 */
  initBuffers : function () {
    var tmp;
    var gl = this.gl;
    
    // Create vertex position buffer.
    this.quadVPBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, this.quadVPBuffer);
    tmp = [
       1.0,  1.0, 0.0,
      -1.0,  1.0, 0.0, 
       1.0, -1.0, 0.0, 
      -1.0, -1.0, 0.0];
    
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(tmp), gl.STATIC_DRAW);
    this.quadVPBuffer.itemSize = 3;
    this.quadVPBuffer.numItems = 4;
    
    /*
     +--------------------+ 
     | -1,1 (1)           | 1,1 (0)
     |                    |
     |                    |
     |                    |
     |                    |
     |                    |
     | -1,-1 (3)          | 1,-1 (2)
     +--------------------+
     */
    
    var scaleX = 1.0;
    var scaleY = 1.0;
    
    // Create vertex texture coordinate buffer.
    this.quadVTCBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, this.quadVTCBuffer);
    tmp = [
      scaleX, 0.0,
      0.0, 0.0,
      scaleX, scaleY,
      0.0, scaleY,
    ];
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(tmp), gl.STATIC_DRAW);
  },


  mvIdentity : function () {
    this.mvMatrix = Matrix.I(4);
  },

  mvMultiply : function(m) {
    this.mvMatrix = this.mvMatrix.x(m);
  },

  mvTranslate : function (m) {
    this.mvMultiply(Matrix.Translation($V([m[0], m[1], m[2]])).ensure4x4());
  },

  setMatrixUniforms : function () {
    this.program.setMatrixUniform("uPMatrix", new Float32Array(this.perspectiveMatrix.flatten()));
    this.program.setMatrixUniform("uMVMatrix", new Float32Array(this.mvMatrix.flatten()));
  },

  initScene : function() {
    var gl = this.gl;
    
    // Establish the perspective with which we want to view the
    // scene. Our field of view is 45 degrees, with a width/height
    // ratio of 640:480, and we only want to see objects between 0.1 units
    // and 100 units away from the camera.
    
    this.perspectiveMatrix = makePerspective(45, 1, 0.1, 100.0);
    
    // Set the drawing position to the "identity" point, which is
    // the center of the scene.
    this.mvIdentity();

    // Now move the drawing position a bit to where we want to start
    // drawing the square.
    this.mvTranslate([0.0, 0.0, -2.4]);

    // Draw the cube by binding the array buffer to the cube's vertices
    // array, setting attributes, and pushing it to GL.
    gl.bindBuffer(gl.ARRAY_BUFFER, this.quadVPBuffer);
    gl.vertexAttribPointer(this.vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);
    
    // Set the texture coordinates attribute for the vertices.
    
    gl.bindBuffer(gl.ARRAY_BUFFER, this.quadVTCBuffer);
    gl.vertexAttribPointer(this.textureCoordAttribute, 2, gl.FLOAT, false, 0, 0);  
    
    this.onInitSceneTextures();
    
    this.setMatrixUniforms();
    
    if (this.framebuffer) {
      console.log("Bound Frame Buffer");
      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
    }
  },



  toString: function() {
    return "WebGLCanvas Size: " + this.size;
  },

  checkLastError: function (operation) {
    var err = this.gl.getError();
    if (err != this.gl.NO_ERROR) {
      var name = this.glNames[err];
      name = (name !== undefined) ? name + "(" + err + ")":
          ("Unknown WebGL ENUM (0x" + value.toString(16) + ")");
      if (operation) {
        console.log("WebGL Error: %s, %s", operation, name);
      } else {
        console.log("WebGL Error: %s", name);
      }
      console.trace();
    }
  },

  onInitWebGL: function () {
    try {
      this.gl = this.canvas.getContext("experimental-webgl") || this.canvas.getContext('webgl');
    } catch(e) {}
    if (!this.gl) {
      error("Unable to initialize WebGL. Your browser may not support it.");
    }
    if (this.glNames) {
      return;
    }
    this.glNames = {};
    for (var propertyName in this.gl) {
      if (typeof this.gl[propertyName] == 'number') {
        this.glNames[this.gl[propertyName]] = propertyName;
      }
    }
  },

  onInitShaders: function() {
    this.program = new Program(this.gl);
    this.program.attach(new Shader(this.gl, vertexShaderScript));
    this.program.attach(new Shader(this.gl, fragmentShaderScript));
    this.program.link();
    this.program.use();
    this.vertexPositionAttribute = this.program.getAttributeLocation("aVertexPosition");
    this.gl.enableVertexAttribArray(this.vertexPositionAttribute);
    this.textureCoordAttribute = this.program.getAttributeLocation("aTextureCoord");;
    this.gl.enableVertexAttribArray(this.textureCoordAttribute);
  },

  onInitTextures: function () {
    var gl = this.gl;
    this.texture = new Texture(gl, this.size, gl.RGBA);
  },

  onInitSceneTextures: function () {
    this.texture.bind(0, this.program, "texture");
  },

  drawScene: function() {
    var gl = this.gl;
    gl.bindBuffer(gl.ARRAY_BUFFER, this.quadVPBuffer);
    gl.vertexAttribPointer(this.vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);
    
    // Set the texture coordinates attribute for the vertices.
    
    gl.bindBuffer(gl.ARRAY_BUFFER, this.quadVTCBuffer);
    gl.vertexAttribPointer(this.textureCoordAttribute, 2, gl.FLOAT, false, 0, 0);  
    
    this.setMatrixUniforms();

    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);
  },

  readPixels: function(buffer) {
    var gl = this.gl;
    gl.readPixels(0, 0, this.size.w, this.size.h, gl.RGBA, gl.UNSIGNED_BYTE, buffer);
  },

  bindFrameBuffer: function(){
    var gl = this.gl;
    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
  },

});



module.exports = WebGLCanvas;


/***/ }),

/***/ "./app/canvas/YUVWebGLCanvas.js":
/*!**************************************!*\
  !*** ./app/canvas/YUVWebGLCanvas.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Program     = __webpack_require__(/*! ./Program */ "./app/canvas/Program.js");
var Size        = __webpack_require__(/*! ../utils/Size */ "./app/utils/Size.js");
var Shader      = __webpack_require__(/*! ./Shader */ "./app/canvas/Shader.js");
var Texture     = __webpack_require__(/*! ./Texture */ "./app/canvas/Texture.js");
var Script      = __webpack_require__(/*! ./Script */ "./app/canvas/Script.js");
var WebGLCanvas = __webpack_require__(/*! ./WebGLCanvas */ "./app/canvas/WebGLCanvas.js");

var Class       = __webpack_require__(/*! uclass */ "./node_modules/uclass/uClass.js");

var vertexShaderScript = Script.createFromSource("x-shader/x-vertex", " \
  attribute vec3 aVertexPosition; \
  attribute vec2 aTextureCoord; \
  uniform mat4 uMVMatrix; \
  uniform mat4 uPMatrix; \
  varying highp vec2 vTextureCoord; \
  void main(void) { \
    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0); \
    vTextureCoord = aTextureCoord; \
  } \
");


var fragmentShaderScript = Script.createFromSource("x-shader/x-fragment", " \
  precision highp float; \
  varying highp vec2 vTextureCoord; \
  uniform sampler2D YTexture; \
  uniform sampler2D UTexture; \
  uniform sampler2D VTexture; \
  const mat4 YUV2RGB = mat4 \
  ( \
   1.1643828125, 0, 1.59602734375, -.87078515625, \
   1.1643828125, -.39176171875, -.81296875, .52959375, \
   1.1643828125, 2.017234375, 0, -1.081390625, \
   0, 0, 0, 1 \
  ); \
  void main(void) { \
   gl_FragColor = vec4( texture2D(YTexture,  vTextureCoord).x, texture2D(UTexture, vTextureCoord).x, texture2D(VTexture, vTextureCoord).x, 1) * YUV2RGB; \
  } \
");




var YUVWebGLCanvas = new Class({
  Extends  : WebGLCanvas,
  Binds : ['decode'],

  initialize : function(canvas, size) {
    this.canvas = canvas;
    this.canvas.width = size.w;
    this.canvas.height = size.h;
    this.fmt = 0;
  },

  resize : function (size) {
    if (this.size && this.size.w === size.w && this.size.h === size.h)
    return;
    YUVWebGLCanvas.parent.initialize.call(this, this.canvas, size);
  },

  onInitShaders: function() {
    this.program = new Program(this.gl);
    this.program.attach(new Shader(this.gl, vertexShaderScript));
    this.program.attach(new Shader(this.gl, fragmentShaderScript));
    this.program.link();
    this.program.use();
    this.vertexPositionAttribute = this.program.getAttributeLocation("aVertexPosition");
    this.gl.enableVertexAttribArray(this.vertexPositionAttribute);
    this.textureCoordAttribute = this.program.getAttributeLocation("aTextureCoord");
    this.gl.enableVertexAttribArray(this.textureCoordAttribute);
  },

  onInitTextures: function () {
    var gl = this.gl;
    this.YTexture = new Texture(this.gl, this.size, false);
    this.UTexture = new Texture(this.gl, this.size.getHalfSize(), false);
    this.VTexture = new Texture(this.gl, this.size.getHalfSize(), false);
  },

  onInitSceneTextures: function () {
    this.YTexture.bind(0, this.program, "YTexture");
    this.UTexture.bind(1, this.program, "UTexture");
    this.VTexture.bind(2, this.program, "VTexture");
  },

  fillYUVTextures: function(y, u, v) {
    this.YTexture.fill(y);
    this.UTexture.fill(u);
    this.VTexture.fill(v);
  },

  decode: function(buffer, width, height) {

    if (!buffer)
      return;
      
    this.resize(new Size(width, height));
    this.bindFrameBuffer();
    var lumaSize = width * height;
    var chromaSize = lumaSize >> 2;

    this.YTexture.fill(buffer.subarray(0, lumaSize));
    this.UTexture.fill(buffer.subarray(lumaSize, lumaSize + chromaSize));
    this.VTexture.fill(buffer.subarray(lumaSize + chromaSize, lumaSize + 2 * chromaSize));
    this.drawScene();
  },

  toString: function() {
    return "YUVCanvas Size: " + this.size;
  }
});





module.exports = YUVWebGLCanvas;


/***/ }),

/***/ "./app/utils/Size.js":
/*!***************************!*\
  !*** ./app/utils/Size.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Represents a 2-dimensional size value. 
 */

function Size(w, h) {
  this.w = w;
  this.h = h;
}

Size.prototype = {
  toString: function () {
    return "(" + this.w + ", " + this.h + ")";
  },
  getHalfSize: function() {
    return new Size(this.w >>> 1, this.h >>> 1);
  },
  length: function() {
    return this.w * this.h;
  }
}
module.exports = Size;

/***/ }),

/***/ "./app/utils/assert.js":
/*!*****************************!*\
  !*** ./app/utils/assert.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var error = __webpack_require__(/*! ./error */ "./app/utils/error.js");

function assert(condition, message) {
  if (!condition) {
    error(message);
  }
}


module.exports = assert;


/***/ }),

/***/ "./app/utils/error.js":
/*!****************************!*\
  !*** ./app/utils/error.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function error(message) {
  console.error(message);
  console.trace();
}

module.exports = error;


/***/ }),

/***/ "./app/utils/glUtils.js":
/*!******************************!*\
  !*** ./app/utils/glUtils.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Matrix = __webpack_require__(/*! sylvester.js */ "./node_modules/sylvester.js/lib/index.js").Matrix;
var Vector = __webpack_require__(/*! sylvester.js */ "./node_modules/sylvester.js/lib/index.js").Vector;
var $M     = Matrix.create;


// augment Sylvester some
Matrix.Translation = function (v)
{
  if (v.elements.length == 2) {
    var r = Matrix.I(3);
    r.elements[2][0] = v.elements[0];
    r.elements[2][1] = v.elements[1];
    return r;
  }

  if (v.elements.length == 3) {
    var r = Matrix.I(4);
    r.elements[0][3] = v.elements[0];
    r.elements[1][3] = v.elements[1];
    r.elements[2][3] = v.elements[2];
    return r;
  }

  throw "Invalid length for Translation";
}

Matrix.prototype.flatten = function ()
{
    var result = [];
    if (this.elements.length == 0)
        return [];


    for (var j = 0; j < this.elements[0].length; j++)
        for (var i = 0; i < this.elements.length; i++)
            result.push(this.elements[i][j]);
    return result;
}

Matrix.prototype.ensure4x4 = function()
{
    if (this.elements.length == 4 &&
        this.elements[0].length == 4)
        return this;

    if (this.elements.length > 4 ||
        this.elements[0].length > 4)
        return null;

    for (var i = 0; i < this.elements.length; i++) {
        for (var j = this.elements[i].length; j < 4; j++) {
            if (i == j)
                this.elements[i].push(1);
            else
                this.elements[i].push(0);
        }
    }

    for (var i = this.elements.length; i < 4; i++) {
        if (i == 0)
            this.elements.push([1, 0, 0, 0]);
        else if (i == 1)
            this.elements.push([0, 1, 0, 0]);
        else if (i == 2)
            this.elements.push([0, 0, 1, 0]);
        else if (i == 3)
            this.elements.push([0, 0, 0, 1]);
    }

    return this;
};


Vector.prototype.flatten = function ()
{
    return this.elements;
};



//
// gluPerspective
//
function makePerspective(fovy, aspect, znear, zfar)
{
    var ymax = znear * Math.tan(fovy * Math.PI / 360.0);
    var ymin = -ymax;
    var xmin = ymin * aspect;
    var xmax = ymax * aspect;

    return makeFrustum(xmin, xmax, ymin, ymax, znear, zfar);
}

//
// glFrustum
//
function makeFrustum(left, right,
                     bottom, top,
                     znear, zfar)
{
    var X = 2*znear/(right-left);
    var Y = 2*znear/(top-bottom);
    var A = (right+left)/(right-left);
    var B = (top+bottom)/(top-bottom);
    var C = -(zfar+znear)/(zfar-znear);
    var D = -2*zfar*znear/(zfar-znear);

    return $M([[X, 0, A, 0],
               [0, Y, B, 0],
               [0, 0, C, D],
               [0, 0, -1, 0]]);
}

module.exports.makePerspective = makePerspective;



/***/ }),

/***/ "./node_modules/mout/lang/clone.js":
/*!*****************************************!*\
  !*** ./node_modules/mout/lang/clone.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var kindOf = __webpack_require__(/*! ./kindOf */ "./node_modules/mout/lang/kindOf.js");
var isPlainObject = __webpack_require__(/*! ./isPlainObject */ "./node_modules/mout/lang/isPlainObject.js");
var mixIn = __webpack_require__(/*! ../object/mixIn */ "./node_modules/mout/object/mixIn.js");

    /**
     * Clone native types.
     */
    function clone(val){
        switch (kindOf(val)) {
            case 'Object':
                return cloneObject(val);
            case 'Array':
                return cloneArray(val);
            case 'RegExp':
                return cloneRegExp(val);
            case 'Date':
                return cloneDate(val);
            default:
                return val;
        }
    }

    function cloneObject(source) {
        if (isPlainObject(source)) {
            return mixIn({}, source);
        } else {
            return source;
        }
    }

    function cloneRegExp(r) {
        var flags = '';
        flags += r.multiline ? 'm' : '';
        flags += r.global ? 'g' : '';
        flags += r.ignoreCase ? 'i' : '';
        return new RegExp(r.source, flags);
    }

    function cloneDate(date) {
        return new Date(+date);
    }

    function cloneArray(arr) {
        return arr.slice();
    }

    module.exports = clone;




/***/ }),

/***/ "./node_modules/mout/lang/createObject.js":
/*!************************************************!*\
  !*** ./node_modules/mout/lang/createObject.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var mixIn = __webpack_require__(/*! ../object/mixIn */ "./node_modules/mout/object/mixIn.js");

    /**
     * Create Object using prototypal inheritance and setting custom properties.
     * - Mix between Douglas Crockford Prototypal Inheritance <http://javascript.crockford.com/prototypal.html> and the EcmaScript 5 `Object.create()` method.
     * @param {object} parent    Parent Object.
     * @param {object} [props] Object properties.
     * @return {object} Created object.
     */
    function createObject(parent, props){
        function F(){}
        F.prototype = parent;
        return mixIn(new F(), props);

    }
    module.exports = createObject;




/***/ }),

/***/ "./node_modules/mout/lang/deepClone.js":
/*!*********************************************!*\
  !*** ./node_modules/mout/lang/deepClone.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var clone = __webpack_require__(/*! ./clone */ "./node_modules/mout/lang/clone.js");
var forOwn = __webpack_require__(/*! ../object/forOwn */ "./node_modules/mout/object/forOwn.js");
var kindOf = __webpack_require__(/*! ./kindOf */ "./node_modules/mout/lang/kindOf.js");
var isPlainObject = __webpack_require__(/*! ./isPlainObject */ "./node_modules/mout/lang/isPlainObject.js");

    /**
     * Recursively clone native types.
     */
    function deepClone(val, instanceClone) {
        switch ( kindOf(val) ) {
            case 'Object':
                return cloneObject(val, instanceClone);
            case 'Array':
                return cloneArray(val, instanceClone);
            default:
                return clone(val);
        }
    }

    function cloneObject(source, instanceClone) {
        if (isPlainObject(source)) {
            var out = {};
            forOwn(source, function(val, key) {
                this[key] = deepClone(val, instanceClone);
            }, out);
            return out;
        } else if (instanceClone) {
            return instanceClone(source);
        } else {
            return source;
        }
    }

    function cloneArray(arr, instanceClone) {
        var out = [],
            i = -1,
            n = arr.length,
            val;
        while (++i < n) {
            out[i] = deepClone(arr[i], instanceClone);
        }
        return out;
    }

    module.exports = deepClone;





/***/ }),

/***/ "./node_modules/mout/lang/isKind.js":
/*!******************************************!*\
  !*** ./node_modules/mout/lang/isKind.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var kindOf = __webpack_require__(/*! ./kindOf */ "./node_modules/mout/lang/kindOf.js");
    /**
     * Check if value is from a specific "kind".
     */
    function isKind(val, kind){
        return kindOf(val) === kind;
    }
    module.exports = isKind;



/***/ }),

/***/ "./node_modules/mout/lang/isObject.js":
/*!********************************************!*\
  !*** ./node_modules/mout/lang/isObject.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isKind = __webpack_require__(/*! ./isKind */ "./node_modules/mout/lang/isKind.js");
    /**
     */
    function isObject(val) {
        return isKind(val, 'Object');
    }
    module.exports = isObject;



/***/ }),

/***/ "./node_modules/mout/lang/isPlainObject.js":
/*!*************************************************!*\
  !*** ./node_modules/mout/lang/isPlainObject.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {



    /**
     * Checks if the value is created by the `Object` constructor.
     */
    function isPlainObject(value) {
        return (!!value && typeof value === 'object' &&
            value.constructor === Object);
    }

    module.exports = isPlainObject;




/***/ }),

/***/ "./node_modules/mout/lang/kindOf.js":
/*!******************************************!*\
  !*** ./node_modules/mout/lang/kindOf.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {


    /**
     * Gets the "kind" of value. (e.g. "String", "Number", etc)
     */
    function kindOf(val) {
        return Object.prototype.toString.call(val).slice(8, -1);
    }
    module.exports = kindOf;



/***/ }),

/***/ "./node_modules/mout/object/forIn.js":
/*!*******************************************!*\
  !*** ./node_modules/mout/object/forIn.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var hasOwn = __webpack_require__(/*! ./hasOwn */ "./node_modules/mout/object/hasOwn.js");

    var _hasDontEnumBug,
        _dontEnums;

    function checkDontEnum(){
        _dontEnums = [
                'toString',
                'toLocaleString',
                'valueOf',
                'hasOwnProperty',
                'isPrototypeOf',
                'propertyIsEnumerable',
                'constructor'
            ];

        _hasDontEnumBug = true;

        for (var key in {'toString': null}) {
            _hasDontEnumBug = false;
        }
    }

    /**
     * Similar to Array/forEach but works over object properties and fixes Don't
     * Enum bug on IE.
     * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
     */
    function forIn(obj, fn, thisObj){
        var key, i = 0;
        // no need to check if argument is a real object that way we can use
        // it for arrays, functions, date, etc.

        //post-pone check till needed
        if (_hasDontEnumBug == null) checkDontEnum();

        for (key in obj) {
            if (exec(fn, obj, key, thisObj) === false) {
                break;
            }
        }


        if (_hasDontEnumBug) {
            var ctor = obj.constructor,
                isProto = !!ctor && obj === ctor.prototype;

            while (key = _dontEnums[i++]) {
                // For constructor, if it is a prototype object the constructor
                // is always non-enumerable unless defined otherwise (and
                // enumerated above).  For non-prototype objects, it will have
                // to be defined on this object, since it cannot be defined on
                // any prototype objects.
                //
                // For other [[DontEnum]] properties, check if the value is
                // different than Object prototype value.
                if (
                    (key !== 'constructor' ||
                        (!isProto && hasOwn(obj, key))) &&
                    obj[key] !== Object.prototype[key]
                ) {
                    if (exec(fn, obj, key, thisObj) === false) {
                        break;
                    }
                }
            }
        }
    }

    function exec(fn, obj, key, thisObj){
        return fn.call(thisObj, obj[key], key, obj);
    }

    module.exports = forIn;




/***/ }),

/***/ "./node_modules/mout/object/forOwn.js":
/*!********************************************!*\
  !*** ./node_modules/mout/object/forOwn.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var hasOwn = __webpack_require__(/*! ./hasOwn */ "./node_modules/mout/object/hasOwn.js");
var forIn = __webpack_require__(/*! ./forIn */ "./node_modules/mout/object/forIn.js");

    /**
     * Similar to Array/forEach but works over object properties and fixes Don't
     * Enum bug on IE.
     * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
     */
    function forOwn(obj, fn, thisObj){
        forIn(obj, function(val, key){
            if (hasOwn(obj, key)) {
                return fn.call(thisObj, obj[key], key, obj);
            }
        });
    }

    module.exports = forOwn;




/***/ }),

/***/ "./node_modules/mout/object/hasOwn.js":
/*!********************************************!*\
  !*** ./node_modules/mout/object/hasOwn.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {



    /**
     * Safer Object.hasOwnProperty
     */
     function hasOwn(obj, prop){
         return Object.prototype.hasOwnProperty.call(obj, prop);
     }

     module.exports = hasOwn;




/***/ }),

/***/ "./node_modules/mout/object/merge.js":
/*!*******************************************!*\
  !*** ./node_modules/mout/object/merge.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var hasOwn = __webpack_require__(/*! ./hasOwn */ "./node_modules/mout/object/hasOwn.js");
var deepClone = __webpack_require__(/*! ../lang/deepClone */ "./node_modules/mout/lang/deepClone.js");
var isObject = __webpack_require__(/*! ../lang/isObject */ "./node_modules/mout/lang/isObject.js");

    /**
     * Deep merge objects.
     */
    function merge() {
        var i = 1,
            key, val, obj, target;

        // make sure we don't modify source element and it's properties
        // objects are passed by reference
        target = deepClone( arguments[0] );

        while (obj = arguments[i++]) {
            for (key in obj) {
                if ( ! hasOwn(obj, key) ) {
                    continue;
                }

                val = obj[key];

                if ( isObject(val) && isObject(target[key]) ){
                    // inception, deep merge objects
                    target[key] = merge(target[key], val);
                } else {
                    // make sure arrays, regexp, date, objects are cloned
                    target[key] = deepClone(val);
                }

            }
        }

        return target;
    }

    module.exports = merge;




/***/ }),

/***/ "./node_modules/mout/object/mixIn.js":
/*!*******************************************!*\
  !*** ./node_modules/mout/object/mixIn.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var forOwn = __webpack_require__(/*! ./forOwn */ "./node_modules/mout/object/forOwn.js");

    /**
    * Combine properties from all the objects into first one.
    * - This method affects target object in place, if you want to create a new Object pass an empty object as first param.
    * @param {object} target    Target Object
    * @param {...object} objects    Objects to be combined (0...n objects).
    * @return {object} Target Object.
    */
    function mixIn(target, objects){
        var i = 0,
            n = arguments.length,
            obj;
        while(++i < n){
            obj = arguments[i];
            if (obj != null) {
                forOwn(obj, copyProp, target);
            }
        }
        return target;
    }

    function copyProp(val, key){
        this[key] = val;
    }

    module.exports = mixIn;



/***/ }),

/***/ "./node_modules/sylvester.js/lib/index.js":
/*!************************************************!*\
  !*** ./node_modules/sylvester.js/lib/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright (c) 2011, Chris Umbel

var global = (Function('return this'))();

exports.Vector = __webpack_require__(/*! ./vector */ "./node_modules/sylvester.js/lib/vector.js");
global.$V = exports.Vector.create;
exports.Matrix = __webpack_require__(/*! ./matrix */ "./node_modules/sylvester.js/lib/matrix.js");
global.$M = exports.Matrix.create;
exports.Line = __webpack_require__(/*! ./line */ "./node_modules/sylvester.js/lib/line.js");
global.$L = exports.Line.create;
exports.Plane = __webpack_require__(/*! ./plane */ "./node_modules/sylvester.js/lib/plane.js");
global.$P = exports.Plane.create;
exports.Line.Segment = __webpack_require__(/*! ./line.segment */ "./node_modules/sylvester.js/lib/line.segment.js");
exports.Sylvester = __webpack_require__(/*! ./sylvester */ "./node_modules/sylvester.js/lib/sylvester.js");


/***/ }),

/***/ "./node_modules/sylvester.js/lib/line.js":
/*!***********************************************!*\
  !*** ./node_modules/sylvester.js/lib/line.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright (c) 2011, Chris Umbel, James Coglan
var Vector = __webpack_require__(/*! ./vector */ "./node_modules/sylvester.js/lib/vector.js");
var Matrix = __webpack_require__(/*! ./matrix */ "./node_modules/sylvester.js/lib/matrix.js");
var Plane = __webpack_require__(/*! ./plane */ "./node_modules/sylvester.js/lib/plane.js");
var Sylvester = __webpack_require__(/*! ./sylvester */ "./node_modules/sylvester.js/lib/sylvester.js");

// Line class - depends on Vector, and some methods require Matrix and Plane.

function Line() {}
Line.prototype = {

  // Returns true if the argument occupies the same space as the line
  eql: function(line) {
    return (this.isParallelTo(line) && this.contains(line.anchor));
  },

  // Returns a copy of the line
  dup: function() {
    return Line.create(this.anchor, this.direction);
  },

  // Returns the result of translating the line by the given vector/array
  translate: function(vector) {
    var V = vector.elements || vector;
    return Line.create([
      this.anchor.elements[0] + V[0],
      this.anchor.elements[1] + V[1],
      this.anchor.elements[2] + (V[2] || 0)
    ], this.direction);
  },

  // Returns true if the line is parallel to the argument. Here, 'parallel to'
  // means that the argument's direction is either parallel or antiparallel to
  // the line's own direction. A line is parallel to a plane if the two do not
  // have a unique intersection.
  isParallelTo: function(obj) {
    if (obj.normal || (obj.start && obj.end)) { return obj.isParallelTo(this); }
    var theta = this.direction.angleFrom(obj.direction);
    return (Math.abs(theta) <= Sylvester.precision || Math.abs(theta - Math.PI) <= Sylvester.precision);
  },

  // Returns the line's perpendicular distance from the argument,
  // which can be a point, a line or a plane
  distanceFrom: function(obj) {
    if (obj.normal || (obj.start && obj.end)) { return obj.distanceFrom(this); }
    if (obj.direction) {
      // obj is a line
      if (this.isParallelTo(obj)) { return this.distanceFrom(obj.anchor); }
      var N = this.direction.cross(obj.direction).toUnitVector().elements;
      var A = this.anchor.elements, B = obj.anchor.elements;
      return Math.abs((A[0] - B[0]) * N[0] + (A[1] - B[1]) * N[1] + (A[2] - B[2]) * N[2]);
    } else {
      // obj is a point
      var P = obj.elements || obj;
      var A = this.anchor.elements, D = this.direction.elements;
      var PA1 = P[0] - A[0], PA2 = P[1] - A[1], PA3 = (P[2] || 0) - A[2];
      var modPA = Math.sqrt(PA1*PA1 + PA2*PA2 + PA3*PA3);
      if (modPA === 0) return 0;
      // Assumes direction vector is normalized
      var cosTheta = (PA1 * D[0] + PA2 * D[1] + PA3 * D[2]) / modPA;
      var sin2 = 1 - cosTheta*cosTheta;
      return Math.abs(modPA * Math.sqrt(sin2 < 0 ? 0 : sin2));
    }
  },

  // Returns true iff the argument is a point on the line, or if the argument
  // is a line segment lying within the receiver
  contains: function(obj) {
    if (obj.start && obj.end) { return this.contains(obj.start) && this.contains(obj.end); }
    var dist = this.distanceFrom(obj);
    return (dist !== null && dist <= Sylvester.precision);
  },

  // Returns the distance from the anchor of the given point. Negative values are
  // returned for points that are in the opposite direction to the line's direction from
  // the line's anchor point.
  positionOf: function(point) {
    if (!this.contains(point)) { return null; }
    var P = point.elements || point;
    var A = this.anchor.elements, D = this.direction.elements;
    return (P[0] - A[0]) * D[0] + (P[1] - A[1]) * D[1] + ((P[2] || 0) - A[2]) * D[2];
  },

  // Returns true iff the line lies in the given plane
  liesIn: function(plane) {
    return plane.contains(this);
  },

  // Returns true iff the line has a unique point of intersection with the argument
  intersects: function(obj) {
    if (obj.normal) { return obj.intersects(this); }
    return (!this.isParallelTo(obj) && this.distanceFrom(obj) <= Sylvester.precision);
  },

  // Returns the unique intersection point with the argument, if one exists
  intersectionWith: function(obj) {
    if (obj.normal || (obj.start && obj.end)) { return obj.intersectionWith(this); }
    if (!this.intersects(obj)) { return null; }
    var P = this.anchor.elements, X = this.direction.elements,
        Q = obj.anchor.elements, Y = obj.direction.elements;
    var X1 = X[0], X2 = X[1], X3 = X[2], Y1 = Y[0], Y2 = Y[1], Y3 = Y[2];
    var PsubQ1 = P[0] - Q[0], PsubQ2 = P[1] - Q[1], PsubQ3 = P[2] - Q[2];
    var XdotQsubP = - X1*PsubQ1 - X2*PsubQ2 - X3*PsubQ3;
    var YdotPsubQ = Y1*PsubQ1 + Y2*PsubQ2 + Y3*PsubQ3;
    var XdotX = X1*X1 + X2*X2 + X3*X3;
    var YdotY = Y1*Y1 + Y2*Y2 + Y3*Y3;
    var XdotY = X1*Y1 + X2*Y2 + X3*Y3;
    var k = (XdotQsubP * YdotY / XdotX + XdotY * YdotPsubQ) / (YdotY - XdotY * XdotY);
    return Vector.create([P[0] + k*X1, P[1] + k*X2, P[2] + k*X3]);
  },

  // Returns the point on the line that is closest to the given point or line/line segment
  pointClosestTo: function(obj) {
    if (obj.start && obj.end) {
      // obj is a line segment
      var P = obj.pointClosestTo(this);
      return (P === null) ? null : this.pointClosestTo(P);
    } else if (obj.direction) {
      // obj is a line
      if (this.intersects(obj)) { return this.intersectionWith(obj); }
      if (this.isParallelTo(obj)) { return null; }
      var D = this.direction.elements, E = obj.direction.elements;
      var D1 = D[0], D2 = D[1], D3 = D[2], E1 = E[0], E2 = E[1], E3 = E[2];
      // Create plane containing obj and the shared normal and intersect this with it
      // Thank you: http://www.cgafaq.info/wiki/Line-line_distance
      var x = (D3 * E1 - D1 * E3), y = (D1 * E2 - D2 * E1), z = (D2 * E3 - D3 * E2);
      var N = [x * E3 - y * E2, y * E1 - z * E3, z * E2 - x * E1];
      var P = Plane.create(obj.anchor, N);
      return P.intersectionWith(this);
    } else {
      // obj is a point
      var P = obj.elements || obj;
      if (this.contains(P)) { return Vector.create(P); }
      var A = this.anchor.elements, D = this.direction.elements;
      var D1 = D[0], D2 = D[1], D3 = D[2], A1 = A[0], A2 = A[1], A3 = A[2];
      var x = D1 * (P[1]-A2) - D2 * (P[0]-A1), y = D2 * ((P[2] || 0) - A3) - D3 * (P[1]-A2),
          z = D3 * (P[0]-A1) - D1 * ((P[2] || 0) - A3);
      var V = Vector.create([D2 * x - D3 * z, D3 * y - D1 * x, D1 * z - D2 * y]);
      var k = this.distanceFrom(P) / V.modulus();
      return Vector.create([
        P[0] + V.elements[0] * k,
        P[1] + V.elements[1] * k,
        (P[2] || 0) + V.elements[2] * k
      ]);
    }
  },

  // Returns a copy of the line rotated by t radians about the given line. Works by
  // finding the argument's closest point to this line's anchor point (call this C) and
  // rotating the anchor about C. Also rotates the line's direction about the argument's.
  // Be careful with this - the rotation axis' direction affects the outcome!
  rotate: function(t, line) {
    // If we're working in 2D
    if (typeof(line.direction) == 'undefined') { line = Line.create(line.to3D(), Vector.k); }
    var R = Matrix.Rotation(t, line.direction).elements;
    var C = line.pointClosestTo(this.anchor).elements;
    var A = this.anchor.elements, D = this.direction.elements;
    var C1 = C[0], C2 = C[1], C3 = C[2], A1 = A[0], A2 = A[1], A3 = A[2];
    var x = A1 - C1, y = A2 - C2, z = A3 - C3;
    return Line.create([
      C1 + R[0][0] * x + R[0][1] * y + R[0][2] * z,
      C2 + R[1][0] * x + R[1][1] * y + R[1][2] * z,
      C3 + R[2][0] * x + R[2][1] * y + R[2][2] * z
    ], [
      R[0][0] * D[0] + R[0][1] * D[1] + R[0][2] * D[2],
      R[1][0] * D[0] + R[1][1] * D[1] + R[1][2] * D[2],
      R[2][0] * D[0] + R[2][1] * D[1] + R[2][2] * D[2]
    ]);
  },

  // Returns a copy of the line with its direction vector reversed.
  // Useful when using lines for rotations.
  reverse: function() {
    return Line.create(this.anchor, this.direction.x(-1));
  },

  // Returns the line's reflection in the given point or line
  reflectionIn: function(obj) {
    if (obj.normal) {
      // obj is a plane
      var A = this.anchor.elements, D = this.direction.elements;
      var A1 = A[0], A2 = A[1], A3 = A[2], D1 = D[0], D2 = D[1], D3 = D[2];
      var newA = this.anchor.reflectionIn(obj).elements;
      // Add the line's direction vector to its anchor, then mirror that in the plane
      var AD1 = A1 + D1, AD2 = A2 + D2, AD3 = A3 + D3;
      var Q = obj.pointClosestTo([AD1, AD2, AD3]).elements;
      var newD = [Q[0] + (Q[0] - AD1) - newA[0], Q[1] + (Q[1] - AD2) - newA[1], Q[2] + (Q[2] - AD3) - newA[2]];
      return Line.create(newA, newD);
    } else if (obj.direction) {
      // obj is a line - reflection obtained by rotating PI radians about obj
      return this.rotate(Math.PI, obj);
    } else {
      // obj is a point - just reflect the line's anchor in it
      var P = obj.elements || obj;
      return Line.create(this.anchor.reflectionIn([P[0], P[1], (P[2] || 0)]), this.direction);
    }
  },

  // Set the line's anchor point and direction.
  setVectors: function(anchor, direction) {
    // Need to do this so that line's properties are not
    // references to the arguments passed in
    anchor = Vector.create(anchor);
    direction = Vector.create(direction);
    if (anchor.elements.length == 2) {anchor.elements.push(0); }
    if (direction.elements.length == 2) { direction.elements.push(0); }
    if (anchor.elements.length > 3 || direction.elements.length > 3) { return null; }
    var mod = direction.modulus();
    if (mod === 0) { return null; }
    this.anchor = anchor;
    this.direction = Vector.create([
      direction.elements[0] / mod,
      direction.elements[1] / mod,
      direction.elements[2] / mod
    ]);
    return this;
  }
};

// Constructor function
Line.create = function(anchor, direction) {
  var L = new Line();
  return L.setVectors(anchor, direction);
};

// Axes
Line.X = Line.create(Vector.Zero(3), Vector.i);
Line.Y = Line.create(Vector.Zero(3), Vector.j);
Line.Z = Line.create(Vector.Zero(3), Vector.k);

module.exports = Line;


/***/ }),

/***/ "./node_modules/sylvester.js/lib/line.segment.js":
/*!*******************************************************!*\
  !*** ./node_modules/sylvester.js/lib/line.segment.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright (c) 2011, Chris Umbel, James Coglan
// Line.Segment class - depends on Line and its dependencies.

var Line = __webpack_require__(/*! ./line */ "./node_modules/sylvester.js/lib/line.js");
var Vector = __webpack_require__(/*! ./vector */ "./node_modules/sylvester.js/lib/vector.js");

Line.Segment = function() {};
Line.Segment.prototype = {

  // Returns true iff the line segment is equal to the argument
  eql: function(segment) {
    return (this.start.eql(segment.start) && this.end.eql(segment.end)) ||
        (this.start.eql(segment.end) && this.end.eql(segment.start));
  },

  // Returns a copy of the line segment
  dup: function() {
    return Line.Segment.create(this.start, this.end);
  },

  // Returns the length of the line segment
  length: function() {
    var A = this.start.elements, B = this.end.elements;
    var C1 = B[0] - A[0], C2 = B[1] - A[1], C3 = B[2] - A[2];
    return Math.sqrt(C1*C1 + C2*C2 + C3*C3);
  },

  // Returns the line segment as a vector equal to its
  // end point relative to its endpoint
  toVector: function() {
    var A = this.start.elements, B = this.end.elements;
    return Vector.create([B[0] - A[0], B[1] - A[1], B[2] - A[2]]);
  },

  // Returns the segment's midpoint as a vector
  midpoint: function() {
    var A = this.start.elements, B = this.end.elements;
    return Vector.create([(B[0] + A[0])/2, (B[1] + A[1])/2, (B[2] + A[2])/2]);
  },

  // Returns the plane that bisects the segment
  bisectingPlane: function() {
    return Plane.create(this.midpoint(), this.toVector());
  },

  // Returns the result of translating the line by the given vector/array
  translate: function(vector) {
    var V = vector.elements || vector;
    var S = this.start.elements, E = this.end.elements;
    return Line.Segment.create(
      [S[0] + V[0], S[1] + V[1], S[2] + (V[2] || 0)],
      [E[0] + V[0], E[1] + V[1], E[2] + (V[2] || 0)]
    );
  },

  // Returns true iff the line segment is parallel to the argument. It simply forwards
  // the method call onto its line property.
  isParallelTo: function(obj) {
    return this.line.isParallelTo(obj);
  },

  // Returns the distance between the argument and the line segment's closest point to the argument
  distanceFrom: function(obj) {
    var P = this.pointClosestTo(obj);
    return (P === null) ? null : P.distanceFrom(obj);
  },

  // Returns true iff the given point lies on the segment
  contains: function(obj) {
    if (obj.start && obj.end) { return this.contains(obj.start) && this.contains(obj.end); }
    var P = (obj.elements || obj).slice();
    if (P.length == 2) { P.push(0); }
    if (this.start.eql(P)) { return true; }
    var S = this.start.elements;
    var V = Vector.create([S[0] - P[0], S[1] - P[1], S[2] - (P[2] || 0)]);
    var vect = this.toVector();
    return V.isAntiparallelTo(vect) && V.modulus() <= vect.modulus();
  },

  // Returns true iff the line segment intersects the argument
  intersects: function(obj) {
    return (this.intersectionWith(obj) !== null);
  },

  // Returns the unique point of intersection with the argument
  intersectionWith: function(obj) {
    if (!this.line.intersects(obj)) { return null; }
    var P = this.line.intersectionWith(obj);
    return (this.contains(P) ? P : null);
  },

  // Returns the point on the line segment closest to the given object
  pointClosestTo: function(obj) {
    if (obj.normal) {
      // obj is a plane
      var V = this.line.intersectionWith(obj);
      if (V === null) { return null; }
      return this.pointClosestTo(V);
    } else {
      // obj is a line (segment) or point
      var P = this.line.pointClosestTo(obj);
      if (P === null) { return null; }
      if (this.contains(P)) { return P; }
      return (this.line.positionOf(P) < 0 ? this.start : this.end).dup();
    }
  },

  // Set the start and end-points of the segment
  setPoints: function(startPoint, endPoint) {
    startPoint = Vector.create(startPoint).to3D();
    endPoint = Vector.create(endPoint).to3D();
    if (startPoint === null || endPoint === null) { return null; }
    this.line = Line.create(startPoint, endPoint.subtract(startPoint));
    this.start = startPoint;
    this.end = endPoint;
    return this;
  }
};

// Constructor function
Line.Segment.create = function(v1, v2) {
  var S = new Line.Segment();
  return S.setPoints(v1, v2);
};

module.exports = Line.Segment;


/***/ }),

/***/ "./node_modules/sylvester.js/lib/matrix.js":
/*!*************************************************!*\
  !*** ./node_modules/sylvester.js/lib/matrix.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright (c) 2011, Chris Umbel, James Coglan
// Matrix class - depends on Vector.

var Sylvester = __webpack_require__(/*! ./sylvester */ "./node_modules/sylvester.js/lib/sylvester.js");
var Vector = __webpack_require__(/*! ./vector */ "./node_modules/sylvester.js/lib/vector.js");

// augment a matrix M with identity rows/cols
function identSize(M, m, n, k) {
    var e = M.elements;
    var i = k - 1;

    while(i--) {
	var row = [];
	
	for(var j = 0; j < n; j++)
	    row.push(j == i ? 1 : 0);
	
        e.unshift(row);
    }
    
    for(var i = k - 1; i < m; i++) {
        while(e[i].length < n)
            e[i].unshift(0);
    }

    return $M(e);
}

function pca(X) {
    var Sigma = X.transpose().x(X).x(1 / X.rows());
    var svd = Sigma.svd();
    return {U: svd.U, S: svd.S};
}

// singular value decomposition in pure javascript
function svdJs() {
    var A = this;
    var V = Matrix.I(A.rows());
    var S = A.transpose();
    var U = Matrix.I(A.cols());
    var err = Number.MAX_VALUE;
    var i = 0;
    var maxLoop = 100;

    while(err > 2.2737e-13 && i < maxLoop) {
        var qr = S.transpose().qrJs();
        S = qr.R;
        V = V.x(qr.Q);
        qr = S.transpose().qrJs();
        U = U.x(qr.Q);
        S = qr.R;

        var e = S.triu(1).unroll().norm();
        var f = S.diagonal().norm();

        if(f == 0)
            f = 1;

        err = e / f;

        i++;
    }

    var ss = S.diagonal();
    var s = [];

    for(var i = 1; i <= ss.cols(); i++) {
        var ssn = ss.e(i);
        s.push(Math.abs(ssn));

        if(ssn < 0) {
            for(var j = 0; j < U.rows(); j++) {
                V.elements[j][i - 1] = -(V.elements[j][i - 1]);
            }
        }
    }

    return {U: U, S: $V(s).toDiagonalMatrix(), V: V};
}



// QR decomposition in pure javascript
function qrJs() {
    var m = this.rows();
    var n = this.cols();
    var Q = Matrix.I(m);
    var A = this;
    
    for(var k = 1; k < Math.min(m, n); k++) {
	var ak = A.slice(k, 0, k, k).col(1);
	var oneZero = [1];
	
	while(oneZero.length <=  m - k)
	    oneZero.push(0);
	
	oneZero = $V(oneZero);
	var vk = ak.add(oneZero.x(ak.norm() * Math.sign(ak.e(1))));
	var Vk = $M(vk);
	var Hk = Matrix.I(m - k + 1).subtract(Vk.x(2).x(Vk.transpose()).div(Vk.transpose().x(Vk).e(1, 1)));
	var Qk = identSize(Hk, m, n, k);
	A = Qk.x(A);
	// slow way to compute Q
	Q = Q.x(Qk);
    }
    
    return {Q: Q, R: A};
}




function Matrix() {}
Matrix.prototype = {
    // solve a system of linear equations (work in progress)
    solve: function(b) {
	var lu = this.lu();
	b = lu.P.x(b);
	var y = lu.L.forwardSubstitute(b);
	var x = lu.U.backSubstitute(y);
	return lu.P.x(x);
	//return this.inv().x(b);
    },

    // project a matrix onto a lower dim
    pcaProject: function(k, U) {
	var U = U || pca(this).U;
	var Ureduce= U.slice(1, U.rows(), 1, k);
	return {Z: this.x(Ureduce), U: U};
    },

    // recover a matrix to a higher dimension
    pcaRecover: function(U) {
	var k = this.cols();
	var Ureduce = U.slice(1, U.rows(), 1, k);
	return this.x(Ureduce.transpose());
    },    

    // grab the upper triangular part of the matrix
    triu: function(k) {
	if(!k)
	    k = 0;
	
	return this.map(function(x, i, j) {
	    return j - i >= k ? x : 0;
	});
    },

    // unroll a matrix into a vector
    unroll: function() {
	var v = [];
	
	for(var i = 1; i <= this.cols(); i++) {
	    for(var j = 1; j <= this.rows(); j++) {
		v.push(this.e(j, i));
	    }
	}

	return $V(v);
    },

    // return a sub-block of the matrix
    slice: function(startRow, endRow, startCol, endCol) {
	var x = [];
	
	if(endRow == 0)
	    endRow = this.rows();
	
	if(endCol == 0)
	    endCol = this.cols();

	for(i = startRow; i <= endRow; i++) {
	    var row = [];

	    for(j = startCol; j <= endCol; j++) {
		row.push(this.e(i, j));
	    }

	    x.push(row);
	}

	return $M(x);
    },

    // Returns element (i,j) of the matrix
    e: function(i,j) {
	if (i < 1 || i > this.elements.length || j < 1 || j > this.elements[0].length) { return null; }
	return this.elements[i - 1][j - 1];
    },

    // Returns row k of the matrix as a vector
    row: function(i) {
	if (i > this.elements.length) { return null; }
	return $V(this.elements[i - 1]);
    },

    // Returns column k of the matrix as a vector
    col: function(j) {
	if (j > this.elements[0].length) { return null; }
	var col = [], n = this.elements.length;
	for (var i = 0; i < n; i++) { col.push(this.elements[i][j - 1]); }
	return $V(col);
    },

    // Returns the number of rows/columns the matrix has
    dimensions: function() {
	return {rows: this.elements.length, cols: this.elements[0].length};
    },

    // Returns the number of rows in the matrix
    rows: function() {
	return this.elements.length;
    },

    // Returns the number of columns in the matrix
    cols: function() {
	return this.elements[0].length;
    },

    approxEql: function(matrix) {
	return this.eql(matrix, Sylvester.approxPrecision);
    },

    // Returns true iff the matrix is equal to the argument. You can supply
    // a vector as the argument, in which case the receiver must be a
    // one-column matrix equal to the vector.
    eql: function(matrix, precision) {
	var M = matrix.elements || matrix;
	if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
	if (this.elements.length != M.length ||
            this.elements[0].length != M[0].length) { return false; }
	var i = this.elements.length, nj = this.elements[0].length, j;
	while (i--) { j = nj;
		      while (j--) {
			  if (Math.abs(this.elements[i][j] - M[i][j]) > (precision || Sylvester.precision)) { return false; }
		      }
		    }
	return true;
    },

    // Returns a copy of the matrix
    dup: function() {
	return Matrix.create(this.elements);
    },

    // Maps the matrix to another matrix (of the same dimensions) according to the given function
    map: function(fn) {
    var els = [], i = this.elements.length, nj = this.elements[0].length, j;
	while (i--) { j = nj;
		      els[i] = [];
		      while (j--) {
			  els[i][j] = fn(this.elements[i][j], i + 1, j + 1);
		      }
		    }
	return Matrix.create(els);
    },

    // Returns true iff the argument has the same dimensions as the matrix
    isSameSizeAs: function(matrix) {
	var M = matrix.elements || matrix;
	if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
	return (this.elements.length == M.length &&
		this.elements[0].length == M[0].length);
    },

    // Returns the result of adding the argument to the matrix
    add: function(matrix) {
	if(typeof(matrix) == 'number') {
	    return this.map(function(x, i, j) { return x + matrix});
	} else {
	    var M = matrix.elements || matrix;
	    if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
	    if (!this.isSameSizeAs(M)) { return null; }
	    return this.map(function(x, i, j) { return x + M[i - 1][j - 1]; });
	}
    },

    // Returns the result of subtracting the argument from the matrix
    subtract: function(matrix) {
	if(typeof(matrix) == 'number') {
	    return this.map(function(x, i, j) { return x - matrix});
	} else {
	    var M = matrix.elements || matrix;
	    if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
	    if (!this.isSameSizeAs(M)) { return null; }
	    return this.map(function(x, i, j) { return x - M[i - 1][j - 1]; });
	}
    },

    // Returns true iff the matrix can multiply the argument from the left
    canMultiplyFromLeft: function(matrix) {
	var M = matrix.elements || matrix;
	if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
	// this.columns should equal matrix.rows
	return (this.elements[0].length == M.length);
    },

    // Returns the result of a multiplication-style operation the matrix from the right by the argument.
    // If the argument is a scalar then just operate on all the elements. If the argument is
    // a vector, a vector is returned, which saves you having to remember calling
    // col(1) on the result.
    mulOp: function(matrix, op) {
	if (!matrix.elements) {
	    return this.map(function(x) { return op(x, matrix); });
	}

	var returnVector = matrix.modulus ? true : false;
	var M = matrix.elements || matrix;
	if (typeof(M[0][0]) == 'undefined') 
	    M = Matrix.create(M).elements;
	if (!this.canMultiplyFromLeft(M)) 
	    return null; 
	var e = this.elements, rowThis, rowElem, elements = [],
        sum, m = e.length, n = M[0].length, o = e[0].length, i = m, j, k;

	while (i--) {
            rowElem = [];
            rowThis = e[i];
            j = n;

            while (j--) {
		sum = 0;
		k = o;

		while (k--) {
                    sum += op(rowThis[k], M[k][j]);
		}

		rowElem[j] = sum;
            }

            elements[i] = rowElem;
	}

	var M = Matrix.create(elements);
	return returnVector ? M.col(1) : M;
    },

    // Returns the result of dividing the matrix from the right by the argument.
    // If the argument is a scalar then just divide all the elements. If the argument is
    // a vector, a vector is returned, which saves you having to remember calling
    // col(1) on the result.
    div: function(matrix) {
	return this.mulOp(matrix, function(x, y) { return x / y});
    },

    // Returns the result of multiplying the matrix from the right by the argument.
    // If the argument is a scalar then just multiply all the elements. If the argument is
    // a vector, a vector is returned, which saves you having to remember calling
    // col(1) on the result.
    multiply: function(matrix) {
	return this.mulOp(matrix, function(x, y) { return x * y});
    },

    x: function(matrix) { return this.multiply(matrix); },

    elementMultiply: function(v) {
        return this.map(function(k, i, j) {
            return v.e(i, j) * k;
        });
    },

    // sum all elements in the matrix
    sum: function() {
        var sum = 0;

        this.map(function(x) { sum += x;});

        return sum;
    },

    // Returns a Vector of each colum averaged.
    mean: function() {
      var dim = this.dimensions();
      var r = [];
      for (var i = 1; i <= dim.cols; i++) {
        r.push(this.col(i).sum() / dim.rows);
      }
      return $V(r);
    },

    column: function(n) {
	return this.col(n);
    },

    // element-wise log
    log: function() {
	return this.map(function(x) { return Math.log(x); });
    },

    // Returns a submatrix taken from the matrix
    // Argument order is: start row, start col, nrows, ncols
    // Element selection wraps if the required index is outside the matrix's bounds, so you could
    // use this to perform row/column cycling or copy-augmenting.
    minor: function(a, b, c, d) {
	var elements = [], ni = c, i, nj, j;
	var rows = this.elements.length, cols = this.elements[0].length;
	while (ni--) {
	    i = c - ni - 1;
	    elements[i] = [];
	    nj = d;
	    while (nj--) {
		j = d - nj - 1;
		elements[i][j] = this.elements[(a + i - 1) % rows][(b + j - 1) % cols];
	    }
	}
	return Matrix.create(elements);
    },

    // Returns the transpose of the matrix
    transpose: function() {
    var rows = this.elements.length, i, cols = this.elements[0].length, j;
	var elements = [], i = cols;
	while (i--) {
	    j = rows;
	    elements[i] = [];
	    while (j--) {
		elements[i][j] = this.elements[j][i];
	    }
	}
	return Matrix.create(elements);
    },

    // Returns true iff the matrix is square
    isSquare: function() {
	return (this.elements.length == this.elements[0].length);
    },

    // Returns the (absolute) largest element of the matrix
    max: function() {
	var m = 0, i = this.elements.length, nj = this.elements[0].length, j;
	while (i--) {
	    j = nj;
	    while (j--) {
		if (Math.abs(this.elements[i][j]) > Math.abs(m)) { m = this.elements[i][j]; }
	    }
	}
	return m;
    },

    // Returns the indeces of the first match found by reading row-by-row from left to right
    indexOf: function(x) {
	var index = null, ni = this.elements.length, i, nj = this.elements[0].length, j;
	for (i = 0; i < ni; i++) {
	    for (j = 0; j < nj; j++) {
		if (this.elements[i][j] == x) { return {i: i + 1, j: j + 1}; }
	    }
	}
	return null;
    },

    // If the matrix is square, returns the diagonal elements as a vector.
    // Otherwise, returns null.
    diagonal: function() {
	if (!this.isSquare) { return null; }
	var els = [], n = this.elements.length;
	for (var i = 0; i < n; i++) {
	    els.push(this.elements[i][i]);
	}
	return $V(els);
    },

    // Make the matrix upper (right) triangular by Gaussian elimination.
    // This method only adds multiples of rows to other rows. No rows are
    // scaled up or switched, and the determinant is preserved.
    toRightTriangular: function() {
	var M = this.dup(), els;
	var n = this.elements.length, i, j, np = this.elements[0].length, p;
	for (i = 0; i < n; i++) {
	    if (M.elements[i][i] == 0) {
		for (j = i + 1; j < n; j++) {
		    if (M.elements[j][i] != 0) {
			els = [];
			for (p = 0; p < np; p++) { els.push(M.elements[i][p] + M.elements[j][p]); }
			M.elements[i] = els;
			break;
		    }
		}
	    }
	    if (M.elements[i][i] != 0) {
		for (j = i + 1; j < n; j++) {
		    var multiplier = M.elements[j][i] / M.elements[i][i];
		    els = [];
		    for (p = 0; p < np; p++) {
			// Elements with column numbers up to an including the number
			// of the row that we're subtracting can safely be set straight to
			// zero, since that's the point of this routine and it avoids having
			// to loop over and correct rounding errors later
			els.push(p <= i ? 0 : M.elements[j][p] - M.elements[i][p] * multiplier);
		    }
		    M.elements[j] = els;
		}
	    }
	}
	return M;
    },

    toUpperTriangular: function() { return this.toRightTriangular(); },

    // Returns the determinant for square matrices
    determinant: function() {
	if (!this.isSquare()) { return null; }
	if (this.cols == 1 && this.rows == 1) { return this.row(1); }
	if (this.cols == 0 && this.rows == 0) { return 1; }
	var M = this.toRightTriangular();
	var det = M.elements[0][0], n = M.elements.length;
	for (var i = 1; i < n; i++) {
	    det = det * M.elements[i][i];
	}
	return det;
    },
    det: function() { return this.determinant(); },

    // Returns true iff the matrix is singular
    isSingular: function() {
	return (this.isSquare() && this.determinant() === 0);
    },

    // Returns the trace for square matrices
    trace: function() {
	if (!this.isSquare()) { return null; }
	var tr = this.elements[0][0], n = this.elements.length;
	for (var i = 1; i < n; i++) {
	    tr += this.elements[i][i];
	}
	return tr;
    },

    tr: function() { return this.trace(); },

    // Returns the rank of the matrix
    rank: function() {
	var M = this.toRightTriangular(), rank = 0;
	var i = this.elements.length, nj = this.elements[0].length, j;
	while (i--) {
	    j = nj;
	    while (j--) {
		if (Math.abs(M.elements[i][j]) > Sylvester.precision) { rank++; break; }
	    }
	}
	return rank;
    },

    rk: function() { return this.rank(); },

    // Returns the result of attaching the given argument to the right-hand side of the matrix
    augment: function(matrix) {
	var M = matrix.elements || matrix;
	if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }
	var T = this.dup(), cols = T.elements[0].length;
	var i = T.elements.length, nj = M[0].length, j;
	if (i != M.length) { return null; }
	while (i--) {
	    j = nj;
	    while (j--) {
		T.elements[i][cols + j] = M[i][j];
	    }
	}
	return T;
    },

    // Returns the inverse (if one exists) using Gauss-Jordan
    inverse: function() {
	if (!this.isSquare() || this.isSingular()) { return null; }
	var n = this.elements.length, i = n, j;
	var M = this.augment(Matrix.I(n)).toRightTriangular();
	var np = M.elements[0].length, p, els, divisor;
	var inverse_elements = [], new_element;
	// Matrix is non-singular so there will be no zeros on the diagonal
	// Cycle through rows from last to first
	while (i--) {
	    // First, normalise diagonal elements to 1
	    els = [];
	    inverse_elements[i] = [];
	    divisor = M.elements[i][i];
	    for (p = 0; p < np; p++) {
        new_element = M.elements[i][p] / divisor;
		els.push(new_element);
		// Shuffle off the current row of the right hand side into the results
		// array as it will not be modified by later runs through this loop
		if (p >= n) { inverse_elements[i].push(new_element); }
	    }
	    M.elements[i] = els;
	    // Then, subtract this row from those above it to
	    // give the identity matrix on the left hand side
	    j = i;
	    while (j--) {
		els = [];
		for (p = 0; p < np; p++) {
		    els.push(M.elements[j][p] - M.elements[i][p] * M.elements[j][i]);
		}
		M.elements[j] = els;
	    }
	}
	return Matrix.create(inverse_elements);
    },

    inv: function() { return this.inverse(); },

    // Returns the result of rounding all the elements
    round: function() {
	return this.map(function(x) { return Math.round(x); });
    },

    // Returns a copy of the matrix with elements set to the given value if they
    // differ from it by less than Sylvester.precision
    snapTo: function(x) {
	return this.map(function(p) {
	    return (Math.abs(p - x) <= Sylvester.precision) ? x : p;
	});
    },

    // Returns a string representation of the matrix
    inspect: function() {
	var matrix_rows = [];
	var n = this.elements.length;
	for (var i = 0; i < n; i++) {
	    matrix_rows.push($V(this.elements[i]).inspect());
	}
	return matrix_rows.join('\n');
    },

    // Returns a array representation of the matrix
    toArray: function() {
    	var matrix_rows = [];
    	var n = this.elements.length;
    	for (var i = 0; i < n; i++) {
        matrix_rows.push(this.elements[i]);
    	}
      return matrix_rows;
    },


    // Set the matrix's elements from an array. If the argument passed
    // is a vector, the resulting matrix will be a single column.
    setElements: function(els) {
	var i, j, elements = els.elements || els;
	if (typeof(elements[0][0]) != 'undefined') {
	    i = elements.length;
	    this.elements = [];
	    while (i--) {
		j = elements[i].length;
		this.elements[i] = [];
		while (j--) {
		    this.elements[i][j] = elements[i][j];
		}
	    }
	    return this;
	}
	var n = elements.length;
	this.elements = [];
	for (i = 0; i < n; i++) {
	    this.elements.push([elements[i]]);
	}
	return this;
    },

    // return the indexes of the columns with the largest value
    // for each row
    maxColumnIndexes: function() {
	var maxes = [];

	for(var i = 1; i <= this.rows(); i++) {
	    var max = null;
	    var maxIndex = -1;

	    for(var j = 1; j <= this.cols(); j++) {
		if(max === null || this.e(i, j) > max) {
		    max = this.e(i, j);
		    maxIndex = j;
		}
	    }

	    maxes.push(maxIndex);
	}

	return $V(maxes);
    },

    // return the largest values in each row
    maxColumns: function() {
	var maxes = [];

	for(var i = 1; i <= this.rows(); i++) {
	    var max = null;

	    for(var j = 1; j <= this.cols(); j++) {
		if(max === null || this.e(i, j) > max) {
		    max = this.e(i, j);
		}
	    }

	    maxes.push(max);
	}

	return $V(maxes);
    },

    // return the indexes of the columns with the smallest values
    // for each row
    minColumnIndexes: function() {
	var mins = [];

	for(var i = 1; i <= this.rows(); i++) {
	    var min = null;
	    var minIndex = -1;

	    for(var j = 1; j <= this.cols(); j++) {
		if(min === null || this.e(i, j) < min) {
		    min = this.e(i, j);
		    minIndex = j;
		}
	    }

	    mins.push(minIndex);
	}

	return $V(mins);
    },

    // return the smallest values in each row
    minColumns: function() {
	var mins = [];

	for(var i = 1; i <= this.rows(); i++) {
	    var min = null;

	    for(var j = 1; j <= this.cols(); j++) {
		if(min === null || this.e(i, j) < min) {
		    min = this.e(i, j);
		}
	    }

	    mins.push(min);
	}

	return $V(mins);
    },
    
    // perorm a partial pivot on the matrix. essentially move the largest
    // row below-or-including the pivot and replace the pivot's row with it.
    // a pivot matrix is returned so multiplication can perform the transform.
    partialPivot: function(k, j, P, A, L) {
	var maxIndex = 0;
	var maxValue = 0;

	for(var i = k; i <= A.rows(); i++) {
	    if(Math.abs(A.e(i, j)) > maxValue) {
		maxValue = Math.abs(A.e(k, j));
		maxIndex = i;
	    }
	}

	if(maxIndex != k) {
	    var tmp = A.elements[k - 1];
	    A.elements[k - 1] = A.elements[maxIndex - 1];
	    A.elements[maxIndex - 1] = tmp;
	    
	    P.elements[k - 1][k - 1] = 0;
	    P.elements[k - 1][maxIndex - 1] = 1;
	    P.elements[maxIndex - 1][maxIndex - 1] = 0;
	    P.elements[maxIndex - 1][k - 1] = 1;
	}
	
	return P;
    },

    // solve lower-triangular matrix * x = b via forward substitution
    forwardSubstitute: function(b) {
	var xa = [];

	for(var i = 1; i <= this.rows(); i++) {
	    var w = 0;

	    for(var j = 1; j < i; j++) {
		w += this.e(i, j) * xa[j - 1];
	    }

	    xa.push((b.e(i) - w) / this.e(i, i));
	}

	return $V(xa);
    },

    // solve an upper-triangular matrix * x = b via back substitution
    backSubstitute: function(b) {
	var xa = [];

	for(var i = this.rows(); i > 0; i--) {
	    var w = 0;

	    for(var j = this.cols(); j > i; j--) {
		w += this.e(i, j) * xa[this.rows() - j];
	    }

	    xa.push((b.e(i) - w) / this.e(i, i));
	}

	return $V(xa.reverse());
    },
    
    luJs: luJs,
    svdJs: svdJs,
    qrJs: qrJs,
};


var tolerance =  1.4901e-08;

// pure Javascript LU factorization
function luJs() {
    var A = this.dup();
    var L = Matrix.I(A.rows());
    var P = Matrix.I(A.rows());
    var U = Matrix.Zeros(A.rows(), A.cols());
    var p = 1;

    for(var k = 1; k <= Math.min(A.cols(), A.rows()); k++) {
	P = A.partialPivot(k, p, P, A, L);
	
	for(var i = k + 1; i <= A.rows(); i++) {
	    var l = A.e(i, p) / A.e(k, p);
	    L.elements[i - 1][k - 1] = l;
	    
	    for(var j = k + 1 ; j <= A.cols(); j++) {
		A.elements[i - 1][j - 1] -= A.e(k, j) * l;
	    }
	}
	
	for(var j = k; j <= A.cols(); j++) {
	    U.elements[k - 1][j - 1] = A.e(k, j);
	}

	if(p < A.cols())
	    p++;
    }    
    
    return {L: L, U: U, P: P};
}



Matrix.prototype.svd = svdJs;
Matrix.prototype.qr = qrJs;
Matrix.prototype.lu = luJs;

// Constructor function
Matrix.create = function(aElements) {
    var M = new Matrix().setElements(aElements);
    return M;
};

// Identity matrix of size n
Matrix.I = function(n) {
    var els = [], i = n, j;
    while (i--) {
	j = n;
	els[i] = [];
	while (j--) {
	    els[i][j] = (i == j) ? 1 : 0;
	}
    }
    return Matrix.create(els);
};

Matrix.loadFile = function(file) {
    var fs = __webpack_require__(/*! fs */ "fs");
    var contents = fs.readFileSync(file, 'utf-8');
    var matrix = [];

    var rowArray = contents.split('\n');
    for (var i = 0; i < rowArray.length; i++) {
	var d = rowArray[i].split(',');
	if (d.length > 1) {
	    matrix.push(d);
	}
    }

    var M = new Matrix();
    return M.setElements(matrix);
};

// Diagonal matrix - all off-diagonal elements are zero
Matrix.Diagonal = function(elements) {
    var i = elements.length;
    var M = Matrix.I(i);
    while (i--) {
	M.elements[i][i] = elements[i];
    }
    return M;
};

// Rotation matrix about some axis. If no axis is
// supplied, assume we're after a 2D transform
Matrix.Rotation = function(theta, a) {
    if (!a) {
	return Matrix.create([
	    [Math.cos(theta), -Math.sin(theta)],
	    [Math.sin(theta), Math.cos(theta)]
	]);
    }
    var axis = a.dup();
    if (axis.elements.length != 3) { return null; }
    var mod = axis.modulus();
    var x = axis.elements[0] / mod, y = axis.elements[1] / mod, z = axis.elements[2] / mod;
    var s = Math.sin(theta), c = Math.cos(theta), t = 1 - c;
    // Formula derived here: http://www.gamedev.net/reference/articles/article1199.asp
    // That proof rotates the co-ordinate system so theta
    // becomes -theta and sin becomes -sin here.
    return Matrix.create([
	[t * x * x + c, t * x * y - s * z, t * x * z + s * y],
	[t * x * y + s * z, t * y * y + c, t * y * z - s * x],
	[t * x * z - s * y, t * y * z + s * x, t * z * z + c]
    ]);
};

// Special case rotations
Matrix.RotationX = function(t) {
    var c = Math.cos(t), s = Math.sin(t);
    return Matrix.create([
	[1, 0, 0],
	[0, c, -s],
	[0, s, c]
    ]);
};

Matrix.RotationY = function(t) {
    var c = Math.cos(t), s = Math.sin(t);
    return Matrix.create([
	[c, 0, s],
	[0, 1, 0],
	[-s, 0, c]
    ]);
};

Matrix.RotationZ = function(t) {
    var c = Math.cos(t), s = Math.sin(t);
    return Matrix.create([
	[c, -s, 0],
	[s, c, 0],
	[0, 0, 1]
    ]);
};

// Random matrix of n rows, m columns
Matrix.Random = function(n, m) {
    if (arguments.length === 1) m = n;
    return Matrix.Zero(n, m).map(
	function() { return Math.random(); }
  );
};

Matrix.Fill = function(n, m, v) {
    if (arguments.length === 2) {
	v = m;
	m = n;
    }

    var els = [], i = n, j;

    while (i--) {
	j = m;
	els[i] = [];

	while (j--) {
	    els[i][j] = v;
	}
    }

    return Matrix.create(els);
};

// Matrix filled with zeros
Matrix.Zero = function(n, m) {
    return Matrix.Fill(n, m, 0);
};

// Matrix filled with zeros
Matrix.Zeros = function(n, m) {
    return Matrix.Zero(n, m);
};

// Matrix filled with ones
Matrix.One = function(n, m) {
    return Matrix.Fill(n, m, 1);
};

// Matrix filled with ones
Matrix.Ones = function(n, m) {
    return Matrix.One(n, m);
};

module.exports = Matrix;


/***/ }),

/***/ "./node_modules/sylvester.js/lib/plane.js":
/*!************************************************!*\
  !*** ./node_modules/sylvester.js/lib/plane.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright (c) 2011, Chris Umbel, James Coglan
// Plane class - depends on Vector. Some methods require Matrix and Line.
var Vector = __webpack_require__(/*! ./vector */ "./node_modules/sylvester.js/lib/vector.js");
var Matrix = __webpack_require__(/*! ./matrix */ "./node_modules/sylvester.js/lib/matrix.js");
var Line = __webpack_require__(/*! ./line */ "./node_modules/sylvester.js/lib/line.js");

var Sylvester = __webpack_require__(/*! ./sylvester */ "./node_modules/sylvester.js/lib/sylvester.js");

function Plane() {}
Plane.prototype = {

  // Returns true iff the plane occupies the same space as the argument
  eql: function(plane) {
    return (this.contains(plane.anchor) && this.isParallelTo(plane));
  },

  // Returns a copy of the plane
  dup: function() {
    return Plane.create(this.anchor, this.normal);
  },

  // Returns the result of translating the plane by the given vector
  translate: function(vector) {
    var V = vector.elements || vector;
    return Plane.create([
      this.anchor.elements[0] + V[0],
      this.anchor.elements[1] + V[1],
      this.anchor.elements[2] + (V[2] || 0)
    ], this.normal);
  },

  // Returns true iff the plane is parallel to the argument. Will return true
  // if the planes are equal, or if you give a line and it lies in the plane.
  isParallelTo: function(obj) {
    var theta;
    if (obj.normal) {
      // obj is a plane
      theta = this.normal.angleFrom(obj.normal);
      return (Math.abs(theta) <= Sylvester.precision || Math.abs(Math.PI - theta) <= Sylvester.precision);
    } else if (obj.direction) {
      // obj is a line
      return this.normal.isPerpendicularTo(obj.direction);
    }
    return null;
  },

  // Returns true iff the receiver is perpendicular to the argument
  isPerpendicularTo: function(plane) {
    var theta = this.normal.angleFrom(plane.normal);
    return (Math.abs(Math.PI/2 - theta) <= Sylvester.precision);
  },

  // Returns the plane's distance from the given object (point, line or plane)
  distanceFrom: function(obj) {
    if (this.intersects(obj) || this.contains(obj)) { return 0; }
    if (obj.anchor) {
      // obj is a plane or line
      var A = this.anchor.elements, B = obj.anchor.elements, N = this.normal.elements;
      return Math.abs((A[0] - B[0]) * N[0] + (A[1] - B[1]) * N[1] + (A[2] - B[2]) * N[2]);
    } else {
      // obj is a point
      var P = obj.elements || obj;
      var A = this.anchor.elements, N = this.normal.elements;
      return Math.abs((A[0] - P[0]) * N[0] + (A[1] - P[1]) * N[1] + (A[2] - (P[2] || 0)) * N[2]);
    }
  },

  // Returns true iff the plane contains the given point or line
  contains: function(obj) {
    if (obj.normal) { return null; }
    if (obj.direction) {
      return (this.contains(obj.anchor) && this.contains(obj.anchor.add(obj.direction)));
    } else {
      var P = obj.elements || obj;
      var A = this.anchor.elements, N = this.normal.elements;
      var diff = Math.abs(N[0]*(A[0] - P[0]) + N[1]*(A[1] - P[1]) + N[2]*(A[2] - (P[2] || 0)));
      return (diff <= Sylvester.precision);
    }
  },

  // Returns true iff the plane has a unique point/line of intersection with the argument
  intersects: function(obj) {
    if (typeof(obj.direction) == 'undefined' && typeof(obj.normal) == 'undefined') { return null; }
    return !this.isParallelTo(obj);
  },

  // Returns the unique intersection with the argument, if one exists. The result
  // will be a vector if a line is supplied, and a line if a plane is supplied.
  intersectionWith: function(obj) {
    if (!this.intersects(obj)) { return null; }
    if (obj.direction) {
      // obj is a line
      var A = obj.anchor.elements, D = obj.direction.elements,
          P = this.anchor.elements, N = this.normal.elements;
      var multiplier = (N[0]*(P[0]-A[0]) + N[1]*(P[1]-A[1]) + N[2]*(P[2]-A[2])) / (N[0]*D[0] + N[1]*D[1] + N[2]*D[2]);
      return Vector.create([A[0] + D[0]*multiplier, A[1] + D[1]*multiplier, A[2] + D[2]*multiplier]);
    } else if (obj.normal) {
      // obj is a plane
      var direction = this.normal.cross(obj.normal).toUnitVector();
      // To find an anchor point, we find one co-ordinate that has a value
      // of zero somewhere on the intersection, and remember which one we picked
      var N = this.normal.elements, A = this.anchor.elements,
          O = obj.normal.elements, B = obj.anchor.elements;
      var solver = Matrix.Zero(2,2), i = 0;
      while (solver.isSingular()) {
        i++;
        solver = Matrix.create([
          [ N[i%3], N[(i+1)%3] ],
          [ O[i%3], O[(i+1)%3]  ]
        ]);
      }
      // Then we solve the simultaneous equations in the remaining dimensions
      var inverse = solver.inverse().elements;
      var x = N[0]*A[0] + N[1]*A[1] + N[2]*A[2];
      var y = O[0]*B[0] + O[1]*B[1] + O[2]*B[2];
      var intersection = [
        inverse[0][0] * x + inverse[0][1] * y,
        inverse[1][0] * x + inverse[1][1] * y
      ];
      var anchor = [];
      for (var j = 1; j <= 3; j++) {
        // This formula picks the right element from intersection by
        // cycling depending on which element we set to zero above
        anchor.push((i == j) ? 0 : intersection[(j + (5 - i)%3)%3]);
      }
      return Line.create(anchor, direction);
    }
  },

  // Returns the point in the plane closest to the given point
  pointClosestTo: function(point) {
    var P = point.elements || point;
    var A = this.anchor.elements, N = this.normal.elements;
    var dot = (A[0] - P[0]) * N[0] + (A[1] - P[1]) * N[1] + (A[2] - (P[2] || 0)) * N[2];
    return Vector.create([P[0] + N[0] * dot, P[1] + N[1] * dot, (P[2] || 0) + N[2] * dot]);
  },

  // Returns a copy of the plane, rotated by t radians about the given line
  // See notes on Line#rotate.
  rotate: function(t, line) {
    var R = t.determinant ? t.elements : Matrix.Rotation(t, line.direction).elements;
    var C = line.pointClosestTo(this.anchor).elements;
    var A = this.anchor.elements, N = this.normal.elements;
    var C1 = C[0], C2 = C[1], C3 = C[2], A1 = A[0], A2 = A[1], A3 = A[2];
    var x = A1 - C1, y = A2 - C2, z = A3 - C3;
    return Plane.create([
      C1 + R[0][0] * x + R[0][1] * y + R[0][2] * z,
      C2 + R[1][0] * x + R[1][1] * y + R[1][2] * z,
      C3 + R[2][0] * x + R[2][1] * y + R[2][2] * z
    ], [
      R[0][0] * N[0] + R[0][1] * N[1] + R[0][2] * N[2],
      R[1][0] * N[0] + R[1][1] * N[1] + R[1][2] * N[2],
      R[2][0] * N[0] + R[2][1] * N[1] + R[2][2] * N[2]
    ]);
  },

  // Returns the reflection of the plane in the given point, line or plane.
  reflectionIn: function(obj) {
    if (obj.normal) {
      // obj is a plane
      var A = this.anchor.elements, N = this.normal.elements;
      var A1 = A[0], A2 = A[1], A3 = A[2], N1 = N[0], N2 = N[1], N3 = N[2];
      var newA = this.anchor.reflectionIn(obj).elements;
      // Add the plane's normal to its anchor, then mirror that in the other plane
      var AN1 = A1 + N1, AN2 = A2 + N2, AN3 = A3 + N3;
      var Q = obj.pointClosestTo([AN1, AN2, AN3]).elements;
      var newN = [Q[0] + (Q[0] - AN1) - newA[0], Q[1] + (Q[1] - AN2) - newA[1], Q[2] + (Q[2] - AN3) - newA[2]];
      return Plane.create(newA, newN);
    } else if (obj.direction) {
      // obj is a line
      return this.rotate(Math.PI, obj);
    } else {
      // obj is a point
      var P = obj.elements || obj;
      return Plane.create(this.anchor.reflectionIn([P[0], P[1], (P[2] || 0)]), this.normal);
    }
  },

  // Sets the anchor point and normal to the plane. If three arguments are specified,
  // the normal is calculated by assuming the three points should lie in the same plane.
  // If only two are sepcified, the second is taken to be the normal. Normal vector is
  // normalised before storage.
  setVectors: function(anchor, v1, v2) {
    anchor = Vector.create(anchor);
    anchor = anchor.to3D(); if (anchor === null) { return null; }
    v1 = Vector.create(v1);
    v1 = v1.to3D(); if (v1 === null) { return null; }
    if (typeof(v2) == 'undefined') {
      v2 = null;
    } else {
      v2 = Vector.create(v2);
      v2 = v2.to3D(); if (v2 === null) { return null; }
    }
    var A1 = anchor.elements[0], A2 = anchor.elements[1], A3 = anchor.elements[2];
    var v11 = v1.elements[0], v12 = v1.elements[1], v13 = v1.elements[2];
    var normal, mod;
    if (v2 !== null) {
      var v21 = v2.elements[0], v22 = v2.elements[1], v23 = v2.elements[2];
      normal = Vector.create([
        (v12 - A2) * (v23 - A3) - (v13 - A3) * (v22 - A2),
        (v13 - A3) * (v21 - A1) - (v11 - A1) * (v23 - A3),
        (v11 - A1) * (v22 - A2) - (v12 - A2) * (v21 - A1)
      ]);
      mod = normal.modulus();
      if (mod === 0) { return null; }
      normal = Vector.create([normal.elements[0] / mod, normal.elements[1] / mod, normal.elements[2] / mod]);
    } else {
      mod = Math.sqrt(v11*v11 + v12*v12 + v13*v13);
      if (mod === 0) { return null; }
      normal = Vector.create([v1.elements[0] / mod, v1.elements[1] / mod, v1.elements[2] / mod]);
    }
    this.anchor = anchor;
    this.normal = normal;
    return this;
  }
};

// Constructor function
Plane.create = function(anchor, v1, v2) {
  var P = new Plane();
  return P.setVectors(anchor, v1, v2);
};

// X-Y-Z planes
Plane.XY = Plane.create(Vector.Zero(3), Vector.k);
Plane.YZ = Plane.create(Vector.Zero(3), Vector.i);
Plane.ZX = Plane.create(Vector.Zero(3), Vector.j);
Plane.YX = Plane.XY; Plane.ZY = Plane.YZ; Plane.XZ = Plane.ZX;

// Returns the plane containing the given points (can be arrays as
// well as vectors). If the points are not coplanar, returns null.
Plane.fromPoints = function(points) {
  var np = points.length, list = [], i, P, n, N, A, B, C, D, theta, prevN, totalN = Vector.Zero(3);
  for (i = 0; i < np; i++) {
    P = Vector.create(points[i]).to3D();
    if (P === null) { return null; }
    list.push(P);
    n = list.length;
    if (n > 2) {
      // Compute plane normal for the latest three points
      A = list[n-1].elements; B = list[n-2].elements; C = list[n-3].elements;
      N = Vector.create([
        (A[1] - B[1]) * (C[2] - B[2]) - (A[2] - B[2]) * (C[1] - B[1]),
        (A[2] - B[2]) * (C[0] - B[0]) - (A[0] - B[0]) * (C[2] - B[2]),
        (A[0] - B[0]) * (C[1] - B[1]) - (A[1] - B[1]) * (C[0] - B[0])
      ]).toUnitVector();
      if (n > 3) {
        // If the latest normal is not (anti)parallel to the previous one, we've strayed off the plane.
        // This might be a slightly long-winded way of doing things, but we need the sum of all the normals
        // to find which way the plane normal should point so that the points form an anticlockwise list.
        theta = N.angleFrom(prevN);
        if (theta !== null) {
          if (!(Math.abs(theta) <= Sylvester.precision || Math.abs(theta - Math.PI) <= Sylvester.precision)) { return null; }
        }
      }
      totalN = totalN.add(N);
      prevN = N;
    }
  }
  // We need to add in the normals at the start and end points, which the above misses out
  A = list[1].elements; B = list[0].elements; C = list[n-1].elements; D = list[n-2].elements;
  totalN = totalN.add(Vector.create([
    (A[1] - B[1]) * (C[2] - B[2]) - (A[2] - B[2]) * (C[1] - B[1]),
    (A[2] - B[2]) * (C[0] - B[0]) - (A[0] - B[0]) * (C[2] - B[2]),
    (A[0] - B[0]) * (C[1] - B[1]) - (A[1] - B[1]) * (C[0] - B[0])
  ]).toUnitVector()).add(Vector.create([
    (B[1] - C[1]) * (D[2] - C[2]) - (B[2] - C[2]) * (D[1] - C[1]),
    (B[2] - C[2]) * (D[0] - C[0]) - (B[0] - C[0]) * (D[2] - C[2]),
    (B[0] - C[0]) * (D[1] - C[1]) - (B[1] - C[1]) * (D[0] - C[0])
  ]).toUnitVector());
  return Plane.create(list[0], totalN);
};

module.exports = Plane;


/***/ }),

/***/ "./node_modules/sylvester.js/lib/sylvester.js":
/*!****************************************************!*\
  !*** ./node_modules/sylvester.js/lib/sylvester.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright (c) 2011, Chris Umbel, James Coglan
// This file is required in order for any other classes to work. Some Vector methods work with the
// other Sylvester classes and are useless unless they are included. Other classes such as Line and
// Plane will not function at all without Vector being loaded first.           

Math.sign = function(x) {
    return x < 0 ? -1: 1;
}
                                              
var Sylvester = {
    precision: 1e-6,
    approxPrecision: 1e-5
};

module.exports = Sylvester;


/***/ }),

/***/ "./node_modules/sylvester.js/lib/vector.js":
/*!*************************************************!*\
  !*** ./node_modules/sylvester.js/lib/vector.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright (c) 2011, Chris Umbel, James Coglan
// This file is required in order for any other classes to work. Some Vector methods work with the
// other Sylvester classes and are useless unless they are included. Other classes such as Line and
// Plane will not function at all without Vector being loaded first.

var Sylvester = __webpack_require__(/*! ./sylvester */ "./node_modules/sylvester.js/lib/sylvester.js"),
Matrix = __webpack_require__(/*! ./matrix */ "./node_modules/sylvester.js/lib/matrix.js");

function Vector() {}
Vector.prototype = {

    norm: function() {
	var n = this.elements.length;
	var sum = 0;

	while (n--) {
	    sum += Math.pow(this.elements[n], 2);
	}

	return Math.sqrt(sum);
    },

    // Returns element i of the vector
    e: function(i) {
      return (i < 1 || i > this.elements.length) ? null : this.elements[i - 1];
    },

    // Returns the number of rows/columns the vector has
    dimensions: function() {
      return {rows: 1, cols: this.elements.length};
    },

    // Returns the number of rows in the vector
    rows: function() {
      return 1;
    },

    // Returns the number of columns in the vector
    cols: function() {
      return this.elements.length;
    },

    // Returns the modulus ('length') of the vector
    modulus: function() {
      return Math.sqrt(this.dot(this));
    },

    // Returns true iff the vector is equal to the argument
    eql: function(vector) {
    	var n = this.elements.length;
    	var V = vector.elements || vector;
    	if (n != V.length) { return false; }
    	while (n--) {
    	    if (Math.abs(this.elements[n] - V[n]) > Sylvester.precision) { return false; }
    	}
    	return true;
    },

    // Returns a copy of the vector
    dup: function() {
	    return Vector.create(this.elements);
    },

    // Maps the vector to another vector according to the given function
    map: function(fn) {
	var elements = [];
	this.each(function(x, i) {
	    elements.push(fn(x, i));
	});
	return Vector.create(elements);
    },

    // Calls the iterator for each element of the vector in turn
    each: function(fn) {
	var n = this.elements.length;
	for (var i = 0; i < n; i++) {
	    fn(this.elements[i], i + 1);
	}
    },

    // Returns a new vector created by normalizing the receiver
    toUnitVector: function() {
	var r = this.modulus();
	if (r === 0) { return this.dup(); }
	return this.map(function(x) { return x / r; });
    },

    // Returns the angle between the vector and the argument (also a vector)
    angleFrom: function(vector) {
	var V = vector.elements || vector;
	var n = this.elements.length, k = n, i;
	if (n != V.length) { return null; }
	var dot = 0, mod1 = 0, mod2 = 0;
	// Work things out in parallel to save time
	this.each(function(x, i) {
	    dot += x * V[i - 1];
	    mod1 += x * x;
	    mod2 += V[i - 1] * V[i - 1];
	});
	mod1 = Math.sqrt(mod1); mod2 = Math.sqrt(mod2);
	if (mod1 * mod2 === 0) { return null; }
	var theta = dot / (mod1 * mod2);
	if (theta < -1) { theta = -1; }
	if (theta > 1) { theta = 1; }
	return Math.acos(theta);
    },

    // Returns true iff the vector is parallel to the argument
    isParallelTo: function(vector) {
	var angle = this.angleFrom(vector);
	return (angle === null) ? null : (angle <= Sylvester.precision);
    },

    // Returns true iff the vector is antiparallel to the argument
    isAntiparallelTo: function(vector) {
	var angle = this.angleFrom(vector);
	return (angle === null) ? null : (Math.abs(angle - Math.PI) <= Sylvester.precision);
    },

    // Returns true iff the vector is perpendicular to the argument
    isPerpendicularTo: function(vector) {
	var dot = this.dot(vector);
	return (dot === null) ? null : (Math.abs(dot) <= Sylvester.precision);
    },

    // Returns the result of adding the argument to the vector
    add: function(value) {
	var V = value.elements || value;

	if (this.elements.length != V.length) 
	    return this.map(function(v) { return v + value });
	else
	    return this.map(function(x, i) { return x + V[i - 1]; });
    },

    // Returns the result of subtracting the argument from the vector
    subtract: function(v) {
	if (typeof(v) == 'number')
	    return this.map(function(k) { return k - v; });

	var V = v.elements || v;
	if (this.elements.length != V.length) { return null; }
	return this.map(function(x, i) { return x - V[i - 1]; });
    },

    // Returns the result of multiplying the elements of the vector by the argument
    multiply: function(k) {
	return this.map(function(x) { return x * k; });
    },

    elementMultiply: function(v) {
	return this.map(function(k, i) {
	    return v.e(i) * k;
	});
    },

    sum: function() {
	var sum = 0;
	this.map(function(x) { sum += x;});
	return sum;
    },

    chomp: function(n) {
	var elements = [];

	for (var i = n; i < this.elements.length; i++) {
	    elements.push(this.elements[i]);
	}

	return Vector.create(elements);
    },

    top: function(n) {
	var elements = [];

	for (var i = 0; i < n; i++) {
	    elements.push(this.elements[i]);
	}

	return Vector.create(elements);
    },

    augment: function(elements) {
	var newElements = this.elements;

	for (var i = 0; i < elements.length; i++) {
	    newElements.push(elements[i]);
	}

	return Vector.create(newElements);
    },

    x: function(k) { return this.multiply(k); },

    log: function() {
	return Vector.log(this);
    },

    elementDivide: function(vector) {
	return this.map(function(v, i) {
	    return v / vector.e(i);
	});
    },

    product: function() {
	var p = 1;

	this.map(function(v) {
	    p *= v;
	});

	return p;
    },

    // Returns the scalar product of the vector with the argument
    // Both vectors must have equal dimensionality
    dot: function(vector) {
	var V = vector.elements || vector;
	var i, product = 0, n = this.elements.length;	
	if (n != V.length) { return null; }
	while (n--) { product += this.elements[n] * V[n]; }
	return product;
    },

    // Returns the vector product of the vector with the argument
    // Both vectors must have dimensionality 3
    cross: function(vector) {
	var B = vector.elements || vector;
	if (this.elements.length != 3 || B.length != 3) { return null; }
	var A = this.elements;
	return Vector.create([
	    (A[1] * B[2]) - (A[2] * B[1]),
	    (A[2] * B[0]) - (A[0] * B[2]),
	    (A[0] * B[1]) - (A[1] * B[0])
	]);
    },

    // Returns the (absolute) largest element of the vector
    max: function() {
	var m = 0, i = this.elements.length;
	while (i--) {
	    if (Math.abs(this.elements[i]) > Math.abs(m)) { m = this.elements[i]; }
	}
	return m;
    },


    maxIndex: function() {
	var m = 0, i = this.elements.length;
	var maxIndex = -1;

	while (i--) {
	    if (Math.abs(this.elements[i]) > Math.abs(m)) { 
		m = this.elements[i]; 
		maxIndex = i + 1;
	    }
	}

	return maxIndex;
    },


    // Returns the index of the first match found
    indexOf: function(x) {
	var index = null, n = this.elements.length;
	for (var i = 0; i < n; i++) {
	    if (index === null && this.elements[i] == x) {
		index = i + 1;
	    }
	}
	return index;
    },

    // Returns a diagonal matrix with the vector's elements as its diagonal elements
    toDiagonalMatrix: function() {
	return Matrix.Diagonal(this.elements);
    },

    // Returns the result of rounding the elements of the vector
    round: function() {
	return this.map(function(x) { return Math.round(x); });
    },

    // Transpose a Vector, return a 1xn Matrix
    transpose: function() {
	var rows = this.elements.length;
	var elements = [];

	for (var i = 0; i < rows; i++) {
	    elements.push([this.elements[i]]);
	}
	return Matrix.create(elements);
    },

    // Returns a copy of the vector with elements set to the given value if they
    // differ from it by less than Sylvester.precision
    snapTo: function(x) {
	return this.map(function(y) {
	    return (Math.abs(y - x) <= Sylvester.precision) ? x : y;
	});
    },

    // Returns the vector's distance from the argument, when considered as a point in space
    distanceFrom: function(obj) {
	if (obj.anchor || (obj.start && obj.end)) { return obj.distanceFrom(this); }
	var V = obj.elements || obj;
	if (V.length != this.elements.length) { return null; }
	var sum = 0, part;
	this.each(function(x, i) {
	    part = x - V[i - 1];
	    sum += part * part;
	});
	return Math.sqrt(sum);
    },

    // Returns true if the vector is point on the given line
    liesOn: function(line) {
	return line.contains(this);
    },

    // Return true iff the vector is a point in the given plane
    liesIn: function(plane) {
	return plane.contains(this);
    },

    // Rotates the vector about the given object. The object should be a
    // point if the vector is 2D, and a line if it is 3D. Be careful with line directions!
    rotate: function(t, obj) {
	var V, R = null, x, y, z;
	if (t.determinant) { R = t.elements; }
	switch (this.elements.length) {
	case 2:
            V = obj.elements || obj;
            if (V.length != 2) { return null; }
            if (!R) { R = Matrix.Rotation(t).elements; }
            x = this.elements[0] - V[0];
            y = this.elements[1] - V[1];
            return Vector.create([
		V[0] + R[0][0] * x + R[0][1] * y,
		V[1] + R[1][0] * x + R[1][1] * y
            ]);
            break;
	case 3:
            if (!obj.direction) { return null; }
            var C = obj.pointClosestTo(this).elements;
            if (!R) { R = Matrix.Rotation(t, obj.direction).elements; }
            x = this.elements[0] - C[0];
            y = this.elements[1] - C[1];
            z = this.elements[2] - C[2];
            return Vector.create([
		C[0] + R[0][0] * x + R[0][1] * y + R[0][2] * z,
		C[1] + R[1][0] * x + R[1][1] * y + R[1][2] * z,
		C[2] + R[2][0] * x + R[2][1] * y + R[2][2] * z
            ]);
            break;
	default:
            return null;
	}
    },

    // Returns the result of reflecting the point in the given point, line or plane
    reflectionIn: function(obj) {
	if (obj.anchor) {
	    // obj is a plane or line
	    var P = this.elements.slice();
	    var C = obj.pointClosestTo(P).elements;
	    return Vector.create([C[0] + (C[0] - P[0]), C[1] + (C[1] - P[1]), C[2] + (C[2] - (P[2] || 0))]);
	} else {
	    // obj is a point
	    var Q = obj.elements || obj;
	    if (this.elements.length != Q.length) { return null; }
	    return this.map(function(x, i) { return Q[i - 1] + (Q[i - 1] - x); });
	}
    },

    // Utility to make sure vectors are 3D. If they are 2D, a zero z-component is added
    to3D: function() {
	var V = this.dup();
	switch (V.elements.length) {
	case 3: break;
	case 2: V.elements.push(0); break;
	default: return null;
	}
	return V;
    },

    // Returns a string representation of the vector
    inspect: function() {
	return '[' + this.elements.join(', ') + ']';
    },

    // Set vector's elements from an array
    setElements: function(els) {
	this.elements = (els.elements || els).slice();
	return this;
    }
};

// Constructor function
Vector.create = function(elements) {
    var V = new Vector();
    return V.setElements(elements);
};

// i, j, k unit vectors
Vector.i = Vector.create([1, 0, 0]);
Vector.j = Vector.create([0, 1, 0]);
Vector.k = Vector.create([0, 0, 1]);

// Random vector of size n
Vector.Random = function(n) {
    var elements = [];
    while (n--) { elements.push(Math.random()); }
    return Vector.create(elements);
};

Vector.Fill = function(n, v) {
    var elements = [];
    while (n--) { elements.push(v); }
    return Vector.create(elements);
};

// Vector filled with zeros
Vector.Zero = function(n) {
    return Vector.Fill(n, 0);
};

Vector.One = function(n) {
    return Vector.Fill(n, 1);
};

Vector.log = function(v) {
    return v.map(function(x) {
	return Math.log(x);
    });
};

module.exports = Vector;


/***/ }),

/***/ "./node_modules/uclass/implement.js":
/*!******************************************!*\
  !*** ./node_modules/uclass/implement.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var verbs = /^Implements|Extends|Binds$/

module.exports = function(ctx, obj){
  for(var key in obj) {
    if(key.match(verbs)) continue;
    if((typeof obj[key] == 'function') && obj[key].$static)
      ctx[key] = obj[key];
    else
      ctx.prototype[key] = obj[key];
  }
  return ctx;
}

/***/ }),

/***/ "./node_modules/uclass/uClass.js":
/*!***************************************!*\
  !*** ./node_modules/uclass/uClass.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hasOwn = __webpack_require__(/*! mout/object/hasOwn */ "./node_modules/mout/object/hasOwn.js");
var create = __webpack_require__(/*! mout/lang/createObject */ "./node_modules/mout/lang/createObject.js");
var merge  = __webpack_require__(/*! mout/object/merge */ "./node_modules/mout/object/merge.js");
var kindOf = __webpack_require__(/*! mout/lang/kindOf */ "./node_modules/mout/lang/kindOf.js");
var mixIn  = __webpack_require__(/*! mout/object/mixIn */ "./node_modules/mout/object/mixIn.js");

var implement = __webpack_require__(/*! ./implement */ "./node_modules/uclass/implement.js");
var verbs = /^Implements|Extends|Binds$/




var uClass = function(proto){

  if(kindOf(proto) === "Function") proto = {initialize: proto};

  var superprime = proto.Extends;

  var constructor = (hasOwn(proto, "initialize")) ? proto.initialize : superprime ? superprime : function(){};



  var out = function() {
    var self = this;
      //autobinding takes place here
    if(proto.Binds) proto.Binds.forEach(function(f){
      var original = self[f];
      if(original)
        self[f] = mixIn(self[f].bind(self), original);
    });

      //clone non function/static properties to current instance
    for(var key in out.prototype) {
      var v = out.prototype[key], t = kindOf(v);

      if(key.match(verbs) || t === "Function" || t == "GeneratorFunction")
        continue;

      if(t == "Object")
        self[key] = merge({}, self[key]); //create(null, self[key]);
      else if(t == "Array")
        self[key] = v.slice(); //clone ??
      else
        self[key] = v;
    }

    if(proto.Implements)
      proto.Implements.forEach(function(Mixin){
        Mixin.call(self);
      });




    constructor.apply(this, arguments);
  }


  if (superprime) {
    // inherit from superprime
      var superproto = superprime.prototype;
      if(superproto.Binds)
        proto.Binds = (proto.Binds || []).concat(superproto.Binds);

      if(superproto.Implements)
        proto.Implements = (proto.Implements || []).concat(superproto.Implements);

      var cproto = out.prototype = create(superproto);
      // setting constructor.parent to superprime.prototype
      // because it's the shortest possible absolute reference
      out.parent = superproto;
      cproto.constructor = out

  }


 if(proto.Implements) {
    if (kindOf(proto.Implements) !== "Array")
      proto.Implements = [proto.Implements];
    proto.Implements.forEach(function(Mixin){
      implement(out, Mixin.prototype);
    });
  }

  implement(out, proto);
  if(proto.Binds)
     out.prototype.Binds = proto.Binds;
  if(proto.Implements)
     out.prototype.Implements = proto.Implements;

  return out;
};



module.exports = uClass;

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("events");

/***/ }),

/***/ "ffi":
/*!**********************!*\
  !*** external "ffi" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("ffi");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),

/***/ "ref":
/*!**********************!*\
  !*** external "ref" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("ref");

/***/ })

/******/ })["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,